// this file was generated by https://github.com/dbandstra/zig-gl
//  version: 3.2

const builtin = @import("builtin");

const cc: builtin.CallingConvention = if (builtin.os.tag == .windows and builtin.arch == .i386)
    .StdCall
else
    .C;

const khronos_float_t = f32;
const khronos_int16_t = c_short;
const khronos_int64_t = i64;
const khronos_int8_t = i8;
const khronos_intptr_t = c_long;
const khronos_ssize_t = c_long;
const khronos_uint16_t = c_ushort;
const khronos_uint64_t = u64;
const khronos_uint8_t = u8;

const struct___GLsync = @OpaqueType();

pub const namespace = struct {
    pub const GLbitfield = c_uint;
    pub const GLboolean = u8;
    pub const GLbyte = khronos_int8_t;
    pub const GLchar = u8;
    pub const GLdouble = f64;
    pub const GLenum = c_uint;
    pub const GLfloat = khronos_float_t;
    pub const GLint = c_int;
    pub const GLint64 = khronos_int64_t;
    pub const GLintptr = khronos_intptr_t;
    pub const GLshort = khronos_int16_t;
    pub const GLsizei = c_int;
    pub const GLsizeiptr = khronos_ssize_t;
    pub const GLsync = ?*struct___GLsync;
    pub const GLubyte = khronos_uint8_t;
    pub const GLuint = c_uint;
    pub const GLuint64 = khronos_uint64_t;
    pub const GLushort = khronos_uint16_t;

    pub const GL_ACTIVE_ATTRIBUTES = 0x8B89;
    pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
    pub const GL_ACTIVE_TEXTURE = 0x84E0;
    pub const GL_ACTIVE_UNIFORMS = 0x8B86;
    pub const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
    pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
    pub const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
    pub const GL_ALPHA = 0x1906;
    pub const GL_ALREADY_SIGNALED = 0x911A;
    pub const GL_ALWAYS = 0x0207;
    pub const GL_AND = 0x1501;
    pub const GL_AND_INVERTED = 0x1504;
    pub const GL_AND_REVERSE = 0x1502;
    pub const GL_ARRAY_BUFFER = 0x8892;
    pub const GL_ARRAY_BUFFER_BINDING = 0x8894;
    pub const GL_ATTACHED_SHADERS = 0x8B85;
    pub const GL_BACK = 0x0405;
    pub const GL_BACK_LEFT = 0x0402;
    pub const GL_BACK_RIGHT = 0x0403;
    pub const GL_BGR = 0x80E0;
    pub const GL_BGRA = 0x80E1;
    pub const GL_BGRA_INTEGER = 0x8D9B;
    pub const GL_BGR_INTEGER = 0x8D9A;
    pub const GL_BLEND = 0x0BE2;
    pub const GL_BLEND_COLOR = 0x8005;
    pub const GL_BLEND_DST = 0x0BE0;
    pub const GL_BLEND_DST_ALPHA = 0x80CA;
    pub const GL_BLEND_DST_RGB = 0x80C8;
    pub const GL_BLEND_EQUATION = 0x8009;
    pub const GL_BLEND_EQUATION_ALPHA = 0x883D;
    pub const GL_BLEND_EQUATION_RGB = 0x8009;
    pub const GL_BLEND_SRC = 0x0BE1;
    pub const GL_BLEND_SRC_ALPHA = 0x80CB;
    pub const GL_BLEND_SRC_RGB = 0x80C9;
    pub const GL_BLUE = 0x1905;
    pub const GL_BLUE_INTEGER = 0x8D96;
    pub const GL_BOOL = 0x8B56;
    pub const GL_BOOL_VEC2 = 0x8B57;
    pub const GL_BOOL_VEC3 = 0x8B58;
    pub const GL_BOOL_VEC4 = 0x8B59;
    pub const GL_BUFFER_ACCESS = 0x88BB;
    pub const GL_BUFFER_ACCESS_FLAGS = 0x911F;
    pub const GL_BUFFER_MAPPED = 0x88BC;
    pub const GL_BUFFER_MAP_LENGTH = 0x9120;
    pub const GL_BUFFER_MAP_OFFSET = 0x9121;
    pub const GL_BUFFER_MAP_POINTER = 0x88BD;
    pub const GL_BUFFER_SIZE = 0x8764;
    pub const GL_BUFFER_USAGE = 0x8765;
    pub const GL_BYTE = 0x1400;
    pub const GL_CCW = 0x0901;
    pub const GL_CLAMP_READ_COLOR = 0x891C;
    pub const GL_CLAMP_TO_BORDER = 0x812D;
    pub const GL_CLAMP_TO_EDGE = 0x812F;
    pub const GL_CLEAR = 0x1500;
    pub const GL_CLIP_DISTANCE0 = 0x3000;
    pub const GL_CLIP_DISTANCE1 = 0x3001;
    pub const GL_CLIP_DISTANCE2 = 0x3002;
    pub const GL_CLIP_DISTANCE3 = 0x3003;
    pub const GL_CLIP_DISTANCE4 = 0x3004;
    pub const GL_CLIP_DISTANCE5 = 0x3005;
    pub const GL_CLIP_DISTANCE6 = 0x3006;
    pub const GL_CLIP_DISTANCE7 = 0x3007;
    pub const GL_COLOR = 0x1800;
    pub const GL_COLOR_ATTACHMENT0 = 0x8CE0;
    pub const GL_COLOR_ATTACHMENT1 = 0x8CE1;
    pub const GL_COLOR_ATTACHMENT10 = 0x8CEA;
    pub const GL_COLOR_ATTACHMENT11 = 0x8CEB;
    pub const GL_COLOR_ATTACHMENT12 = 0x8CEC;
    pub const GL_COLOR_ATTACHMENT13 = 0x8CED;
    pub const GL_COLOR_ATTACHMENT14 = 0x8CEE;
    pub const GL_COLOR_ATTACHMENT15 = 0x8CEF;
    pub const GL_COLOR_ATTACHMENT16 = 0x8CF0;
    pub const GL_COLOR_ATTACHMENT17 = 0x8CF1;
    pub const GL_COLOR_ATTACHMENT18 = 0x8CF2;
    pub const GL_COLOR_ATTACHMENT19 = 0x8CF3;
    pub const GL_COLOR_ATTACHMENT2 = 0x8CE2;
    pub const GL_COLOR_ATTACHMENT20 = 0x8CF4;
    pub const GL_COLOR_ATTACHMENT21 = 0x8CF5;
    pub const GL_COLOR_ATTACHMENT22 = 0x8CF6;
    pub const GL_COLOR_ATTACHMENT23 = 0x8CF7;
    pub const GL_COLOR_ATTACHMENT24 = 0x8CF8;
    pub const GL_COLOR_ATTACHMENT25 = 0x8CF9;
    pub const GL_COLOR_ATTACHMENT26 = 0x8CFA;
    pub const GL_COLOR_ATTACHMENT27 = 0x8CFB;
    pub const GL_COLOR_ATTACHMENT28 = 0x8CFC;
    pub const GL_COLOR_ATTACHMENT29 = 0x8CFD;
    pub const GL_COLOR_ATTACHMENT3 = 0x8CE3;
    pub const GL_COLOR_ATTACHMENT30 = 0x8CFE;
    pub const GL_COLOR_ATTACHMENT31 = 0x8CFF;
    pub const GL_COLOR_ATTACHMENT4 = 0x8CE4;
    pub const GL_COLOR_ATTACHMENT5 = 0x8CE5;
    pub const GL_COLOR_ATTACHMENT6 = 0x8CE6;
    pub const GL_COLOR_ATTACHMENT7 = 0x8CE7;
    pub const GL_COLOR_ATTACHMENT8 = 0x8CE8;
    pub const GL_COLOR_ATTACHMENT9 = 0x8CE9;
    pub const GL_COLOR_BUFFER_BIT = 0x00004000;
    pub const GL_COLOR_CLEAR_VALUE = 0x0C22;
    pub const GL_COLOR_LOGIC_OP = 0x0BF2;
    pub const GL_COLOR_WRITEMASK = 0x0C23;
    pub const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
    pub const GL_COMPILE_STATUS = 0x8B81;
    pub const GL_COMPRESSED_RED = 0x8225;
    pub const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
    pub const GL_COMPRESSED_RG = 0x8226;
    pub const GL_COMPRESSED_RGB = 0x84ED;
    pub const GL_COMPRESSED_RGBA = 0x84EE;
    pub const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
    pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
    pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
    pub const GL_COMPRESSED_SRGB = 0x8C48;
    pub const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
    pub const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
    pub const GL_CONDITION_SATISFIED = 0x911C;
    pub const GL_CONSTANT_ALPHA = 0x8003;
    pub const GL_CONSTANT_COLOR = 0x8001;
    pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
    pub const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
    pub const GL_CONTEXT_FLAGS = 0x821E;
    pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
    pub const GL_CONTEXT_PROFILE_MASK = 0x9126;
    pub const GL_COPY = 0x1503;
    pub const GL_COPY_INVERTED = 0x150C;
    pub const GL_COPY_READ_BUFFER = 0x8F36;
    pub const GL_COPY_WRITE_BUFFER = 0x8F37;
    pub const GL_CULL_FACE = 0x0B44;
    pub const GL_CULL_FACE_MODE = 0x0B45;
    pub const GL_CURRENT_PROGRAM = 0x8B8D;
    pub const GL_CURRENT_QUERY = 0x8865;
    pub const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
    pub const GL_CW = 0x0900;
    pub const GL_DECR = 0x1E03;
    pub const GL_DECR_WRAP = 0x8508;
    pub const GL_DELETE_STATUS = 0x8B80;
    pub const GL_DEPTH = 0x1801;
    pub const GL_DEPTH24_STENCIL8 = 0x88F0;
    pub const GL_DEPTH32F_STENCIL8 = 0x8CAD;
    pub const GL_DEPTH_ATTACHMENT = 0x8D00;
    pub const GL_DEPTH_BUFFER_BIT = 0x00000100;
    pub const GL_DEPTH_CLAMP = 0x864F;
    pub const GL_DEPTH_CLEAR_VALUE = 0x0B73;
    pub const GL_DEPTH_COMPONENT = 0x1902;
    pub const GL_DEPTH_COMPONENT16 = 0x81A5;
    pub const GL_DEPTH_COMPONENT24 = 0x81A6;
    pub const GL_DEPTH_COMPONENT32 = 0x81A7;
    pub const GL_DEPTH_COMPONENT32F = 0x8CAC;
    pub const GL_DEPTH_FUNC = 0x0B74;
    pub const GL_DEPTH_RANGE = 0x0B70;
    pub const GL_DEPTH_STENCIL = 0x84F9;
    pub const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
    pub const GL_DEPTH_TEST = 0x0B71;
    pub const GL_DEPTH_WRITEMASK = 0x0B72;
    pub const GL_DITHER = 0x0BD0;
    pub const GL_DONT_CARE = 0x1100;
    pub const GL_DOUBLE = 0x140A;
    pub const GL_DOUBLEBUFFER = 0x0C32;
    pub const GL_DRAW_BUFFER = 0x0C01;
    pub const GL_DRAW_BUFFER0 = 0x8825;
    pub const GL_DRAW_BUFFER1 = 0x8826;
    pub const GL_DRAW_BUFFER10 = 0x882F;
    pub const GL_DRAW_BUFFER11 = 0x8830;
    pub const GL_DRAW_BUFFER12 = 0x8831;
    pub const GL_DRAW_BUFFER13 = 0x8832;
    pub const GL_DRAW_BUFFER14 = 0x8833;
    pub const GL_DRAW_BUFFER15 = 0x8834;
    pub const GL_DRAW_BUFFER2 = 0x8827;
    pub const GL_DRAW_BUFFER3 = 0x8828;
    pub const GL_DRAW_BUFFER4 = 0x8829;
    pub const GL_DRAW_BUFFER5 = 0x882A;
    pub const GL_DRAW_BUFFER6 = 0x882B;
    pub const GL_DRAW_BUFFER7 = 0x882C;
    pub const GL_DRAW_BUFFER8 = 0x882D;
    pub const GL_DRAW_BUFFER9 = 0x882E;
    pub const GL_DRAW_FRAMEBUFFER = 0x8CA9;
    pub const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
    pub const GL_DST_ALPHA = 0x0304;
    pub const GL_DST_COLOR = 0x0306;
    pub const GL_DYNAMIC_COPY = 0x88EA;
    pub const GL_DYNAMIC_DRAW = 0x88E8;
    pub const GL_DYNAMIC_READ = 0x88E9;
    pub const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    pub const GL_EQUAL = 0x0202;
    pub const GL_EQUIV = 0x1509;
    pub const GL_EXTENSIONS = 0x1F03;
    pub const GL_FALSE = 0;
    pub const GL_FASTEST = 0x1101;
    pub const GL_FILL = 0x1B02;
    pub const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
    pub const GL_FIXED_ONLY = 0x891D;
    pub const GL_FLOAT = 0x1406;
    pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    pub const GL_FLOAT_MAT2 = 0x8B5A;
    pub const GL_FLOAT_MAT2x3 = 0x8B65;
    pub const GL_FLOAT_MAT2x4 = 0x8B66;
    pub const GL_FLOAT_MAT3 = 0x8B5B;
    pub const GL_FLOAT_MAT3x2 = 0x8B67;
    pub const GL_FLOAT_MAT3x4 = 0x8B68;
    pub const GL_FLOAT_MAT4 = 0x8B5C;
    pub const GL_FLOAT_MAT4x2 = 0x8B69;
    pub const GL_FLOAT_MAT4x3 = 0x8B6A;
    pub const GL_FLOAT_VEC2 = 0x8B50;
    pub const GL_FLOAT_VEC3 = 0x8B51;
    pub const GL_FLOAT_VEC4 = 0x8B52;
    pub const GL_FRAGMENT_SHADER = 0x8B30;
    pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
    pub const GL_FRAMEBUFFER = 0x8D40;
    pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
    pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
    pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
    pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
    pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
    pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    pub const GL_FRAMEBUFFER_BINDING = 0x8CA6;
    pub const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
    pub const GL_FRAMEBUFFER_DEFAULT = 0x8218;
    pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
    pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
    pub const GL_FRAMEBUFFER_SRGB = 0x8DB9;
    pub const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
    pub const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    pub const GL_FRONT = 0x0404;
    pub const GL_FRONT_AND_BACK = 0x0408;
    pub const GL_FRONT_FACE = 0x0B46;
    pub const GL_FRONT_LEFT = 0x0400;
    pub const GL_FRONT_RIGHT = 0x0401;
    pub const GL_FUNC_ADD = 0x8006;
    pub const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
    pub const GL_FUNC_SUBTRACT = 0x800A;
    pub const GL_GEOMETRY_INPUT_TYPE = 0x8917;
    pub const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
    pub const GL_GEOMETRY_SHADER = 0x8DD9;
    pub const GL_GEOMETRY_VERTICES_OUT = 0x8916;
    pub const GL_GEQUAL = 0x0206;
    pub const GL_GREATER = 0x0204;
    pub const GL_GREEN = 0x1904;
    pub const GL_GREEN_INTEGER = 0x8D95;
    pub const GL_HALF_FLOAT = 0x140B;
    pub const GL_INCR = 0x1E02;
    pub const GL_INCR_WRAP = 0x8507;
    pub const GL_INFO_LOG_LENGTH = 0x8B84;
    pub const GL_INT = 0x1404;
    pub const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
    pub const GL_INT_SAMPLER_1D = 0x8DC9;
    pub const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
    pub const GL_INT_SAMPLER_2D = 0x8DCA;
    pub const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
    pub const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
    pub const GL_INT_SAMPLER_3D = 0x8DCB;
    pub const GL_INT_SAMPLER_BUFFER = 0x8DD0;
    pub const GL_INT_SAMPLER_CUBE = 0x8DCC;
    pub const GL_INT_VEC2 = 0x8B53;
    pub const GL_INT_VEC3 = 0x8B54;
    pub const GL_INT_VEC4 = 0x8B55;
    pub const GL_INVALID_ENUM = 0x0500;
    pub const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    pub const GL_INVALID_INDEX = 0xFFFFFFFF;
    pub const GL_INVALID_OPERATION = 0x0502;
    pub const GL_INVALID_VALUE = 0x0501;
    pub const GL_INVERT = 0x150A;
    pub const GL_KEEP = 0x1E00;
    pub const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
    pub const GL_LEFT = 0x0406;
    pub const GL_LEQUAL = 0x0203;
    pub const GL_LESS = 0x0201;
    pub const GL_LINE = 0x1B01;
    pub const GL_LINEAR = 0x2601;
    pub const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    pub const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
    pub const GL_LINES = 0x0001;
    pub const GL_LINES_ADJACENCY = 0x000A;
    pub const GL_LINE_LOOP = 0x0002;
    pub const GL_LINE_SMOOTH = 0x0B20;
    pub const GL_LINE_SMOOTH_HINT = 0x0C52;
    pub const GL_LINE_STRIP = 0x0003;
    pub const GL_LINE_STRIP_ADJACENCY = 0x000B;
    pub const GL_LINE_WIDTH = 0x0B21;
    pub const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
    pub const GL_LINE_WIDTH_RANGE = 0x0B22;
    pub const GL_LINK_STATUS = 0x8B82;
    pub const GL_LOGIC_OP_MODE = 0x0BF0;
    pub const GL_LOWER_LEFT = 0x8CA1;
    pub const GL_MAJOR_VERSION = 0x821B;
    pub const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
    pub const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    pub const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
    pub const GL_MAP_READ_BIT = 0x0001;
    pub const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
    pub const GL_MAP_WRITE_BIT = 0x0002;
    pub const GL_MAX = 0x8008;
    pub const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
    pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
    pub const GL_MAX_CLIP_DISTANCES = 0x0D32;
    pub const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
    pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
    pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
    pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
    pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
    pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
    pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
    pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
    pub const GL_MAX_DRAW_BUFFERS = 0x8824;
    pub const GL_MAX_ELEMENTS_INDICES = 0x80E9;
    pub const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
    pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
    pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
    pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
    pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
    pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
    pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
    pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
    pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
    pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
    pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
    pub const GL_MAX_INTEGER_SAMPLES = 0x9110;
    pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
    pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
    pub const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
    pub const GL_MAX_SAMPLES = 0x8D57;
    pub const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
    pub const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
    pub const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
    pub const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
    pub const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
    pub const GL_MAX_TEXTURE_SIZE = 0x0D33;
    pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
    pub const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
    pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
    pub const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
    pub const GL_MAX_VARYING_FLOATS = 0x8B4B;
    pub const GL_MAX_VERTEX_ATTRIBS = 0x8869;
    pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
    pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
    pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
    pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
    pub const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
    pub const GL_MIN = 0x8007;
    pub const GL_MINOR_VERSION = 0x821C;
    pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
    pub const GL_MIRRORED_REPEAT = 0x8370;
    pub const GL_MULTISAMPLE = 0x809D;
    pub const GL_NAND = 0x150E;
    pub const GL_NEAREST = 0x2600;
    pub const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
    pub const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
    pub const GL_NEVER = 0x0200;
    pub const GL_NICEST = 0x1102;
    pub const GL_NONE = 0;
    pub const GL_NOOP = 0x1505;
    pub const GL_NOR = 0x1508;
    pub const GL_NOTEQUAL = 0x0205;
    pub const GL_NO_ERROR = 0;
    pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    pub const GL_NUM_EXTENSIONS = 0x821D;
    pub const GL_OBJECT_TYPE = 0x9112;
    pub const GL_ONE = 1;
    pub const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
    pub const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
    pub const GL_ONE_MINUS_DST_ALPHA = 0x0305;
    pub const GL_ONE_MINUS_DST_COLOR = 0x0307;
    pub const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    pub const GL_ONE_MINUS_SRC_COLOR = 0x0301;
    pub const GL_OR = 0x1507;
    pub const GL_OR_INVERTED = 0x150D;
    pub const GL_OR_REVERSE = 0x150B;
    pub const GL_OUT_OF_MEMORY = 0x0505;
    pub const GL_PACK_ALIGNMENT = 0x0D05;
    pub const GL_PACK_IMAGE_HEIGHT = 0x806C;
    pub const GL_PACK_LSB_FIRST = 0x0D01;
    pub const GL_PACK_ROW_LENGTH = 0x0D02;
    pub const GL_PACK_SKIP_IMAGES = 0x806B;
    pub const GL_PACK_SKIP_PIXELS = 0x0D04;
    pub const GL_PACK_SKIP_ROWS = 0x0D03;
    pub const GL_PACK_SWAP_BYTES = 0x0D00;
    pub const GL_PIXEL_PACK_BUFFER = 0x88EB;
    pub const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
    pub const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
    pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
    pub const GL_POINT = 0x1B00;
    pub const GL_POINTS = 0x0000;
    pub const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
    pub const GL_POINT_SIZE = 0x0B11;
    pub const GL_POINT_SIZE_GRANULARITY = 0x0B13;
    pub const GL_POINT_SIZE_RANGE = 0x0B12;
    pub const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
    pub const GL_POLYGON_MODE = 0x0B40;
    pub const GL_POLYGON_OFFSET_FACTOR = 0x8038;
    pub const GL_POLYGON_OFFSET_FILL = 0x8037;
    pub const GL_POLYGON_OFFSET_LINE = 0x2A02;
    pub const GL_POLYGON_OFFSET_POINT = 0x2A01;
    pub const GL_POLYGON_OFFSET_UNITS = 0x2A00;
    pub const GL_POLYGON_SMOOTH = 0x0B41;
    pub const GL_POLYGON_SMOOTH_HINT = 0x0C53;
    pub const GL_PRIMITIVES_GENERATED = 0x8C87;
    pub const GL_PRIMITIVE_RESTART = 0x8F9D;
    pub const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
    pub const GL_PROGRAM_POINT_SIZE = 0x8642;
    pub const GL_PROVOKING_VERTEX = 0x8E4F;
    pub const GL_PROXY_TEXTURE_1D = 0x8063;
    pub const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
    pub const GL_PROXY_TEXTURE_2D = 0x8064;
    pub const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
    pub const GL_PROXY_TEXTURE_3D = 0x8070;
    pub const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
    pub const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
    pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
    pub const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
    pub const GL_QUERY_BY_REGION_WAIT = 0x8E15;
    pub const GL_QUERY_COUNTER_BITS = 0x8864;
    pub const GL_QUERY_NO_WAIT = 0x8E14;
    pub const GL_QUERY_RESULT = 0x8866;
    pub const GL_QUERY_RESULT_AVAILABLE = 0x8867;
    pub const GL_QUERY_WAIT = 0x8E13;
    pub const GL_R11F_G11F_B10F = 0x8C3A;
    pub const GL_R16 = 0x822A;
    pub const GL_R16F = 0x822D;
    pub const GL_R16I = 0x8233;
    pub const GL_R16UI = 0x8234;
    pub const GL_R16_SNORM = 0x8F98;
    pub const GL_R32F = 0x822E;
    pub const GL_R32I = 0x8235;
    pub const GL_R32UI = 0x8236;
    pub const GL_R3_G3_B2 = 0x2A10;
    pub const GL_R8 = 0x8229;
    pub const GL_R8I = 0x8231;
    pub const GL_R8UI = 0x8232;
    pub const GL_R8_SNORM = 0x8F94;
    pub const GL_RASTERIZER_DISCARD = 0x8C89;
    pub const GL_READ_BUFFER = 0x0C02;
    pub const GL_READ_FRAMEBUFFER = 0x8CA8;
    pub const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
    pub const GL_READ_ONLY = 0x88B8;
    pub const GL_READ_WRITE = 0x88BA;
    pub const GL_RED = 0x1903;
    pub const GL_RED_INTEGER = 0x8D94;
    pub const GL_RENDERBUFFER = 0x8D41;
    pub const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    pub const GL_RENDERBUFFER_BINDING = 0x8CA7;
    pub const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
    pub const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    pub const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
    pub const GL_RENDERBUFFER_HEIGHT = 0x8D43;
    pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    pub const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
    pub const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
    pub const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    pub const GL_RENDERBUFFER_WIDTH = 0x8D42;
    pub const GL_RENDERER = 0x1F01;
    pub const GL_REPEAT = 0x2901;
    pub const GL_REPLACE = 0x1E01;
    pub const GL_RG = 0x8227;
    pub const GL_RG16 = 0x822C;
    pub const GL_RG16F = 0x822F;
    pub const GL_RG16I = 0x8239;
    pub const GL_RG16UI = 0x823A;
    pub const GL_RG16_SNORM = 0x8F99;
    pub const GL_RG32F = 0x8230;
    pub const GL_RG32I = 0x823B;
    pub const GL_RG32UI = 0x823C;
    pub const GL_RG8 = 0x822B;
    pub const GL_RG8I = 0x8237;
    pub const GL_RG8UI = 0x8238;
    pub const GL_RG8_SNORM = 0x8F95;
    pub const GL_RGB = 0x1907;
    pub const GL_RGB10 = 0x8052;
    pub const GL_RGB10_A2 = 0x8059;
    pub const GL_RGB12 = 0x8053;
    pub const GL_RGB16 = 0x8054;
    pub const GL_RGB16F = 0x881B;
    pub const GL_RGB16I = 0x8D89;
    pub const GL_RGB16UI = 0x8D77;
    pub const GL_RGB16_SNORM = 0x8F9A;
    pub const GL_RGB32F = 0x8815;
    pub const GL_RGB32I = 0x8D83;
    pub const GL_RGB32UI = 0x8D71;
    pub const GL_RGB4 = 0x804F;
    pub const GL_RGB5 = 0x8050;
    pub const GL_RGB5_A1 = 0x8057;
    pub const GL_RGB8 = 0x8051;
    pub const GL_RGB8I = 0x8D8F;
    pub const GL_RGB8UI = 0x8D7D;
    pub const GL_RGB8_SNORM = 0x8F96;
    pub const GL_RGB9_E5 = 0x8C3D;
    pub const GL_RGBA = 0x1908;
    pub const GL_RGBA12 = 0x805A;
    pub const GL_RGBA16 = 0x805B;
    pub const GL_RGBA16F = 0x881A;
    pub const GL_RGBA16I = 0x8D88;
    pub const GL_RGBA16UI = 0x8D76;
    pub const GL_RGBA16_SNORM = 0x8F9B;
    pub const GL_RGBA2 = 0x8055;
    pub const GL_RGBA32F = 0x8814;
    pub const GL_RGBA32I = 0x8D82;
    pub const GL_RGBA32UI = 0x8D70;
    pub const GL_RGBA4 = 0x8056;
    pub const GL_RGBA8 = 0x8058;
    pub const GL_RGBA8I = 0x8D8E;
    pub const GL_RGBA8UI = 0x8D7C;
    pub const GL_RGBA8_SNORM = 0x8F97;
    pub const GL_RGBA_INTEGER = 0x8D99;
    pub const GL_RGB_INTEGER = 0x8D98;
    pub const GL_RG_INTEGER = 0x8228;
    pub const GL_RIGHT = 0x0407;
    pub const GL_SAMPLER_1D = 0x8B5D;
    pub const GL_SAMPLER_1D_ARRAY = 0x8DC0;
    pub const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
    pub const GL_SAMPLER_1D_SHADOW = 0x8B61;
    pub const GL_SAMPLER_2D = 0x8B5E;
    pub const GL_SAMPLER_2D_ARRAY = 0x8DC1;
    pub const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
    pub const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
    pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
    pub const GL_SAMPLER_2D_RECT = 0x8B63;
    pub const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
    pub const GL_SAMPLER_2D_SHADOW = 0x8B62;
    pub const GL_SAMPLER_3D = 0x8B5F;
    pub const GL_SAMPLER_BUFFER = 0x8DC2;
    pub const GL_SAMPLER_CUBE = 0x8B60;
    pub const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
    pub const GL_SAMPLES = 0x80A9;
    pub const GL_SAMPLES_PASSED = 0x8914;
    pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
    pub const GL_SAMPLE_BUFFERS = 0x80A8;
    pub const GL_SAMPLE_COVERAGE = 0x80A0;
    pub const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
    pub const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
    pub const GL_SAMPLE_MASK = 0x8E51;
    pub const GL_SAMPLE_MASK_VALUE = 0x8E52;
    pub const GL_SAMPLE_POSITION = 0x8E50;
    pub const GL_SCISSOR_BOX = 0x0C10;
    pub const GL_SCISSOR_TEST = 0x0C11;
    pub const GL_SEPARATE_ATTRIBS = 0x8C8D;
    pub const GL_SET = 0x150F;
    pub const GL_SHADER_SOURCE_LENGTH = 0x8B88;
    pub const GL_SHADER_TYPE = 0x8B4F;
    pub const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
    pub const GL_SHORT = 0x1402;
    pub const GL_SIGNALED = 0x9119;
    pub const GL_SIGNED_NORMALIZED = 0x8F9C;
    pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
    pub const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
    pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
    pub const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
    pub const GL_SRC1_ALPHA = 0x8589;
    pub const GL_SRC_ALPHA = 0x0302;
    pub const GL_SRC_ALPHA_SATURATE = 0x0308;
    pub const GL_SRC_COLOR = 0x0300;
    pub const GL_SRGB = 0x8C40;
    pub const GL_SRGB8 = 0x8C41;
    pub const GL_SRGB8_ALPHA8 = 0x8C43;
    pub const GL_SRGB_ALPHA = 0x8C42;
    pub const GL_STATIC_COPY = 0x88E6;
    pub const GL_STATIC_DRAW = 0x88E4;
    pub const GL_STATIC_READ = 0x88E5;
    pub const GL_STENCIL = 0x1802;
    pub const GL_STENCIL_ATTACHMENT = 0x8D20;
    pub const GL_STENCIL_BACK_FAIL = 0x8801;
    pub const GL_STENCIL_BACK_FUNC = 0x8800;
    pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
    pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
    pub const GL_STENCIL_BACK_REF = 0x8CA3;
    pub const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
    pub const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
    pub const GL_STENCIL_BUFFER_BIT = 0x00000400;
    pub const GL_STENCIL_CLEAR_VALUE = 0x0B91;
    pub const GL_STENCIL_FAIL = 0x0B94;
    pub const GL_STENCIL_FUNC = 0x0B92;
    pub const GL_STENCIL_INDEX = 0x1901;
    pub const GL_STENCIL_INDEX1 = 0x8D46;
    pub const GL_STENCIL_INDEX16 = 0x8D49;
    pub const GL_STENCIL_INDEX4 = 0x8D47;
    pub const GL_STENCIL_INDEX8 = 0x8D48;
    pub const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
    pub const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
    pub const GL_STENCIL_REF = 0x0B97;
    pub const GL_STENCIL_TEST = 0x0B90;
    pub const GL_STENCIL_VALUE_MASK = 0x0B93;
    pub const GL_STENCIL_WRITEMASK = 0x0B98;
    pub const GL_STEREO = 0x0C33;
    pub const GL_STREAM_COPY = 0x88E2;
    pub const GL_STREAM_DRAW = 0x88E0;
    pub const GL_STREAM_READ = 0x88E1;
    pub const GL_SUBPIXEL_BITS = 0x0D50;
    pub const GL_SYNC_CONDITION = 0x9113;
    pub const GL_SYNC_FENCE = 0x9116;
    pub const GL_SYNC_FLAGS = 0x9115;
    pub const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
    pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
    pub const GL_SYNC_STATUS = 0x9114;
    pub const GL_TEXTURE = 0x1702;
    pub const GL_TEXTURE0 = 0x84C0;
    pub const GL_TEXTURE1 = 0x84C1;
    pub const GL_TEXTURE10 = 0x84CA;
    pub const GL_TEXTURE11 = 0x84CB;
    pub const GL_TEXTURE12 = 0x84CC;
    pub const GL_TEXTURE13 = 0x84CD;
    pub const GL_TEXTURE14 = 0x84CE;
    pub const GL_TEXTURE15 = 0x84CF;
    pub const GL_TEXTURE16 = 0x84D0;
    pub const GL_TEXTURE17 = 0x84D1;
    pub const GL_TEXTURE18 = 0x84D2;
    pub const GL_TEXTURE19 = 0x84D3;
    pub const GL_TEXTURE2 = 0x84C2;
    pub const GL_TEXTURE20 = 0x84D4;
    pub const GL_TEXTURE21 = 0x84D5;
    pub const GL_TEXTURE22 = 0x84D6;
    pub const GL_TEXTURE23 = 0x84D7;
    pub const GL_TEXTURE24 = 0x84D8;
    pub const GL_TEXTURE25 = 0x84D9;
    pub const GL_TEXTURE26 = 0x84DA;
    pub const GL_TEXTURE27 = 0x84DB;
    pub const GL_TEXTURE28 = 0x84DC;
    pub const GL_TEXTURE29 = 0x84DD;
    pub const GL_TEXTURE3 = 0x84C3;
    pub const GL_TEXTURE30 = 0x84DE;
    pub const GL_TEXTURE31 = 0x84DF;
    pub const GL_TEXTURE4 = 0x84C4;
    pub const GL_TEXTURE5 = 0x84C5;
    pub const GL_TEXTURE6 = 0x84C6;
    pub const GL_TEXTURE7 = 0x84C7;
    pub const GL_TEXTURE8 = 0x84C8;
    pub const GL_TEXTURE9 = 0x84C9;
    pub const GL_TEXTURE_1D = 0x0DE0;
    pub const GL_TEXTURE_1D_ARRAY = 0x8C18;
    pub const GL_TEXTURE_2D = 0x0DE1;
    pub const GL_TEXTURE_2D_ARRAY = 0x8C1A;
    pub const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
    pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
    pub const GL_TEXTURE_3D = 0x806F;
    pub const GL_TEXTURE_ALPHA_SIZE = 0x805F;
    pub const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
    pub const GL_TEXTURE_BASE_LEVEL = 0x813C;
    pub const GL_TEXTURE_BINDING_1D = 0x8068;
    pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
    pub const GL_TEXTURE_BINDING_2D = 0x8069;
    pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
    pub const GL_TEXTURE_BINDING_3D = 0x806A;
    pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
    pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
    pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
    pub const GL_TEXTURE_BLUE_SIZE = 0x805E;
    pub const GL_TEXTURE_BLUE_TYPE = 0x8C12;
    pub const GL_TEXTURE_BORDER_COLOR = 0x1004;
    pub const GL_TEXTURE_BUFFER = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
    pub const GL_TEXTURE_COMPARE_FUNC = 0x884D;
    pub const GL_TEXTURE_COMPARE_MODE = 0x884C;
    pub const GL_TEXTURE_COMPRESSED = 0x86A1;
    pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
    pub const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
    pub const GL_TEXTURE_CUBE_MAP = 0x8513;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
    pub const GL_TEXTURE_DEPTH = 0x8071;
    pub const GL_TEXTURE_DEPTH_SIZE = 0x884A;
    pub const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
    pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
    pub const GL_TEXTURE_GREEN_SIZE = 0x805D;
    pub const GL_TEXTURE_GREEN_TYPE = 0x8C11;
    pub const GL_TEXTURE_HEIGHT = 0x1001;
    pub const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
    pub const GL_TEXTURE_LOD_BIAS = 0x8501;
    pub const GL_TEXTURE_MAG_FILTER = 0x2800;
    pub const GL_TEXTURE_MAX_LEVEL = 0x813D;
    pub const GL_TEXTURE_MAX_LOD = 0x813B;
    pub const GL_TEXTURE_MIN_FILTER = 0x2801;
    pub const GL_TEXTURE_MIN_LOD = 0x813A;
    pub const GL_TEXTURE_RECTANGLE = 0x84F5;
    pub const GL_TEXTURE_RED_SIZE = 0x805C;
    pub const GL_TEXTURE_RED_TYPE = 0x8C10;
    pub const GL_TEXTURE_SAMPLES = 0x9106;
    pub const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
    pub const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
    pub const GL_TEXTURE_WIDTH = 0x1000;
    pub const GL_TEXTURE_WRAP_R = 0x8072;
    pub const GL_TEXTURE_WRAP_S = 0x2802;
    pub const GL_TEXTURE_WRAP_T = 0x2803;
    pub const GL_TIMEOUT_EXPIRED = 0x911B;
    pub const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
    pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
    pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
    pub const GL_TRIANGLES = 0x0004;
    pub const GL_TRIANGLES_ADJACENCY = 0x000C;
    pub const GL_TRIANGLE_FAN = 0x0006;
    pub const GL_TRIANGLE_STRIP = 0x0005;
    pub const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
    pub const GL_TRUE = 1;
    pub const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
    pub const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
    pub const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
    pub const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
    pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
    pub const GL_UNIFORM_BUFFER = 0x8A11;
    pub const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
    pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
    pub const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
    pub const GL_UNIFORM_BUFFER_START = 0x8A29;
    pub const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
    pub const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
    pub const GL_UNIFORM_NAME_LENGTH = 0x8A39;
    pub const GL_UNIFORM_OFFSET = 0x8A3B;
    pub const GL_UNIFORM_SIZE = 0x8A38;
    pub const GL_UNIFORM_TYPE = 0x8A37;
    pub const GL_UNPACK_ALIGNMENT = 0x0CF5;
    pub const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
    pub const GL_UNPACK_LSB_FIRST = 0x0CF1;
    pub const GL_UNPACK_ROW_LENGTH = 0x0CF2;
    pub const GL_UNPACK_SKIP_IMAGES = 0x806D;
    pub const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
    pub const GL_UNPACK_SKIP_ROWS = 0x0CF3;
    pub const GL_UNPACK_SWAP_BYTES = 0x0CF0;
    pub const GL_UNSIGNALED = 0x9118;
    pub const GL_UNSIGNED_BYTE = 0x1401;
    pub const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
    pub const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
    pub const GL_UNSIGNED_INT = 0x1405;
    pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    pub const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
    pub const GL_UNSIGNED_INT_24_8 = 0x84FA;
    pub const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
    pub const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
    pub const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
    pub const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
    pub const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
    pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
    pub const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
    pub const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
    pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
    pub const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
    pub const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
    pub const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
    pub const GL_UNSIGNED_NORMALIZED = 0x8C17;
    pub const GL_UNSIGNED_SHORT = 0x1403;
    pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
    pub const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
    pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
    pub const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
    pub const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
    pub const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
    pub const GL_UPPER_LEFT = 0x8CA2;
    pub const GL_VALIDATE_STATUS = 0x8B83;
    pub const GL_VENDOR = 0x1F00;
    pub const GL_VERSION = 0x1F02;
    pub const GL_VERTEX_ARRAY_BINDING = 0x85B5;
    pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
    pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
    pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
    pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
    pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
    pub const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
    pub const GL_VERTEX_SHADER = 0x8B31;
    pub const GL_VIEWPORT = 0x0BA2;
    pub const GL_WAIT_FAILED = 0x911D;
    pub const GL_WRITE_ONLY = 0x88B9;
    pub const GL_XOR = 0x1506;
    pub const GL_ZERO = 0;

    var _glActiveTexture: fn (GLenum) callconv(cc) void = undefined;
    var _glAttachShader: fn (GLuint, GLuint) callconv(cc) void = undefined;
    var _glBeginConditionalRender: fn (GLuint, GLenum) callconv(cc) void = undefined;
    var _glBeginQuery: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glBeginTransformFeedback: fn (GLenum) callconv(cc) void = undefined;
    var _glBindAttribLocation: fn (GLuint, GLuint, [*c]const GLchar) callconv(cc) void = undefined;
    var _glBindBuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glBindBufferBase: fn (GLenum, GLuint, GLuint) callconv(cc) void = undefined;
    var _glBindBufferRange: fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    var _glBindFragDataLocation: fn (GLuint, GLuint, [*c]const GLchar) callconv(cc) void = undefined;
    var _glBindFramebuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glBindRenderbuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glBindTexture: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glBindVertexArray: fn (GLuint) callconv(cc) void = undefined;
    var _glBlendColor: fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glBlendEquation: fn (GLenum) callconv(cc) void = undefined;
    var _glBlendEquationSeparate: fn (GLenum, GLenum) callconv(cc) void = undefined;
    var _glBlendFunc: fn (GLenum, GLenum) callconv(cc) void = undefined;
    var _glBlendFuncSeparate: fn (GLenum, GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    var _glBlitFramebuffer: fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(cc) void = undefined;
    var _glBufferData: fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) callconv(cc) void = undefined;
    var _glBufferSubData: fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) callconv(cc) void = undefined;
    var _glCheckFramebufferStatus: fn (GLenum) callconv(cc) GLenum = undefined;
    var _glClampColor: fn (GLenum, GLenum) callconv(cc) void = undefined;
    var _glClear: fn (GLbitfield) callconv(cc) void = undefined;
    var _glClearBufferfi: fn (GLenum, GLint, GLfloat, GLint) callconv(cc) void = undefined;
    var _glClearBufferfv: fn (GLenum, GLint, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glClearBufferiv: fn (GLenum, GLint, [*c]const GLint) callconv(cc) void = undefined;
    var _glClearBufferuiv: fn (GLenum, GLint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glClearColor: fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glClearDepth: fn (GLdouble) callconv(cc) void = undefined;
    var _glClearStencil: fn (GLint) callconv(cc) void = undefined;
    var _glClientWaitSync: fn (GLsync, GLbitfield, GLuint64) callconv(cc) GLenum = undefined;
    var _glColorMask: fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(cc) void = undefined;
    var _glColorMaski: fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(cc) void = undefined;
    var _glCompileShader: fn (GLuint) callconv(cc) void = undefined;
    var _glCompressedTexImage1D: fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCompressedTexImage2D: fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCompressedTexImage3D: fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCompressedTexSubImage1D: fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCompressedTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCompressedTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glCopyBufferSubData: fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    var _glCopyTexImage1D: fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(cc) void = undefined;
    var _glCopyTexImage2D: fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(cc) void = undefined;
    var _glCopyTexSubImage1D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(cc) void = undefined;
    var _glCopyTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glCopyTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glCreateProgram: fn () callconv(cc) GLuint = undefined;
    var _glCreateShader: fn (GLenum) callconv(cc) GLuint = undefined;
    var _glCullFace: fn (GLenum) callconv(cc) void = undefined;
    var _glDeleteBuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDeleteFramebuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDeleteProgram: fn (GLuint) callconv(cc) void = undefined;
    var _glDeleteQueries: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDeleteRenderbuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDeleteShader: fn (GLuint) callconv(cc) void = undefined;
    var _glDeleteSync: fn (GLsync) callconv(cc) void = undefined;
    var _glDeleteTextures: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDeleteVertexArrays: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glDepthFunc: fn (GLenum) callconv(cc) void = undefined;
    var _glDepthMask: fn (GLboolean) callconv(cc) void = undefined;
    var _glDepthRange: fn (GLdouble, GLdouble) callconv(cc) void = undefined;
    var _glDetachShader: fn (GLuint, GLuint) callconv(cc) void = undefined;
    var _glDisable: fn (GLenum) callconv(cc) void = undefined;
    var _glDisableVertexAttribArray: fn (GLuint) callconv(cc) void = undefined;
    var _glDisablei: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glDrawArrays: fn (GLenum, GLint, GLsizei) callconv(cc) void = undefined;
    var _glDrawArraysInstanced: fn (GLenum, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glDrawBuffer: fn (GLenum) callconv(cc) void = undefined;
    var _glDrawBuffers: fn (GLsizei, [*c]const GLenum) callconv(cc) void = undefined;
    var _glDrawElements: fn (GLenum, GLsizei, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glDrawElementsBaseVertex: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(cc) void = undefined;
    var _glDrawElementsInstanced: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(cc) void = undefined;
    var _glDrawElementsInstancedBaseVertex: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(cc) void = undefined;
    var _glDrawRangeElements: fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glDrawRangeElementsBaseVertex: fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(cc) void = undefined;
    var _glEnable: fn (GLenum) callconv(cc) void = undefined;
    var _glEnableVertexAttribArray: fn (GLuint) callconv(cc) void = undefined;
    var _glEnablei: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glEndConditionalRender: fn () callconv(cc) void = undefined;
    var _glEndQuery: fn (GLenum) callconv(cc) void = undefined;
    var _glEndTransformFeedback: fn () callconv(cc) void = undefined;
    var _glFenceSync: fn (GLenum, GLbitfield) callconv(cc) GLsync = undefined;
    var _glFinish: fn () callconv(cc) void = undefined;
    var _glFlush: fn () callconv(cc) void = undefined;
    var _glFlushMappedBufferRange: fn (GLenum, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    var _glFramebufferRenderbuffer: fn (GLenum, GLenum, GLenum, GLuint) callconv(cc) void = undefined;
    var _glFramebufferTexture1D: fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    var _glFramebufferTexture2D: fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    var _glFramebufferTexture3D: fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(cc) void = undefined;
    var _glFramebufferTexture: fn (GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    var _glFramebufferTextureLayer: fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(cc) void = undefined;
    var _glFrontFace: fn (GLenum) callconv(cc) void = undefined;
    var _glGenBuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenFramebuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenQueries: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenRenderbuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenTextures: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenVertexArrays: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGenerateMipmap: fn (GLenum) callconv(cc) void = undefined;
    var _glGetActiveAttrib: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetActiveUniform: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetActiveUniformBlockName: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetActiveUniformBlockiv: fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetActiveUniformName: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetActiveUniformsiv: fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetAttachedShaders: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetAttribLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    var _glGetBooleani_v: fn (GLenum, GLuint, [*c]GLboolean) callconv(cc) void = undefined;
    var _glGetBooleanv: fn (GLenum, [*c]GLboolean) callconv(cc) void = undefined;
    var _glGetBufferParameteri64v: fn (GLenum, GLenum, [*c]GLint64) callconv(cc) void = undefined;
    var _glGetBufferParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetBufferPointerv: fn (GLenum, GLenum, [*c]?*c_void) callconv(cc) void = undefined;
    var _glGetBufferSubData: fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) callconv(cc) void = undefined;
    var _glGetCompressedTexImage: fn (GLenum, GLint, ?*c_void) callconv(cc) void = undefined;
    var _glGetDoublev: fn (GLenum, [*c]GLdouble) callconv(cc) void = undefined;
    var _glGetError: fn () callconv(cc) GLenum = undefined;
    var _glGetFloatv: fn (GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetFragDataLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    var _glGetFramebufferAttachmentParameteriv: fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetInteger64i_v: fn (GLenum, GLuint, [*c]GLint64) callconv(cc) void = undefined;
    var _glGetInteger64v: fn (GLenum, [*c]GLint64) callconv(cc) void = undefined;
    var _glGetIntegeri_v: fn (GLenum, GLuint, [*c]GLint) callconv(cc) void = undefined;
    var _glGetIntegerv: fn (GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetMultisamplefv: fn (GLenum, GLuint, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetProgramInfoLog: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetProgramiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetQueryObjectiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetQueryObjectuiv: fn (GLuint, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetQueryiv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetRenderbufferParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetShaderInfoLog: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetShaderSource: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetShaderiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetString: fn (GLenum) callconv(cc) [*c]const GLubyte = undefined;
    var _glGetStringi: fn (GLenum, GLuint) callconv(cc) [*c]const GLubyte = undefined;
    var _glGetSynciv: fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(cc) void = undefined;
    var _glGetTexImage: fn (GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(cc) void = undefined;
    var _glGetTexLevelParameterfv: fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetTexLevelParameteriv: fn (GLenum, GLint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetTexParameterIiv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetTexParameterIuiv: fn (GLenum, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetTexParameterfv: fn (GLenum, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetTexParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetTransformFeedbackVarying: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    var _glGetUniformBlockIndex: fn (GLuint, [*c]const GLchar) callconv(cc) GLuint = undefined;
    var _glGetUniformIndices: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetUniformLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    var _glGetUniformfv: fn (GLuint, GLint, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetUniformiv: fn (GLuint, GLint, [*c]GLint) callconv(cc) void = undefined;
    var _glGetUniformuiv: fn (GLuint, GLint, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetVertexAttribIiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glGetVertexAttribIuiv: fn (GLuint, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    var _glGetVertexAttribPointerv: fn (GLuint, GLenum, [*c]?*c_void) callconv(cc) void = undefined;
    var _glGetVertexAttribdv: fn (GLuint, GLenum, [*c]GLdouble) callconv(cc) void = undefined;
    var _glGetVertexAttribfv: fn (GLuint, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    var _glGetVertexAttribiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    var _glHint: fn (GLenum, GLenum) callconv(cc) void = undefined;
    var _glIsBuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsEnabled: fn (GLenum) callconv(cc) GLboolean = undefined;
    var _glIsEnabledi: fn (GLenum, GLuint) callconv(cc) GLboolean = undefined;
    var _glIsFramebuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsProgram: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsQuery: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsRenderbuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsShader: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsSync: fn (GLsync) callconv(cc) GLboolean = undefined;
    var _glIsTexture: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glIsVertexArray: fn (GLuint) callconv(cc) GLboolean = undefined;
    var _glLineWidth: fn (GLfloat) callconv(cc) void = undefined;
    var _glLinkProgram: fn (GLuint) callconv(cc) void = undefined;
    var _glLogicOp: fn (GLenum) callconv(cc) void = undefined;
    var _glMapBuffer: fn (GLenum, GLenum) callconv(cc) ?*c_void = undefined;
    var _glMapBufferRange: fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(cc) ?*c_void = undefined;
    var _glMultiDrawArrays: fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glMultiDrawElements: fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(cc) void = undefined;
    var _glMultiDrawElementsBaseVertex: fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    var _glPixelStoref: fn (GLenum, GLfloat) callconv(cc) void = undefined;
    var _glPixelStorei: fn (GLenum, GLint) callconv(cc) void = undefined;
    var _glPointParameterf: fn (GLenum, GLfloat) callconv(cc) void = undefined;
    var _glPointParameterfv: fn (GLenum, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glPointParameteri: fn (GLenum, GLint) callconv(cc) void = undefined;
    var _glPointParameteriv: fn (GLenum, [*c]const GLint) callconv(cc) void = undefined;
    var _glPointSize: fn (GLfloat) callconv(cc) void = undefined;
    var _glPolygonMode: fn (GLenum, GLenum) callconv(cc) void = undefined;
    var _glPolygonOffset: fn (GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glPrimitiveRestartIndex: fn (GLuint) callconv(cc) void = undefined;
    var _glProvokingVertex: fn (GLenum) callconv(cc) void = undefined;
    var _glReadBuffer: fn (GLenum) callconv(cc) void = undefined;
    var _glReadPixels: fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(cc) void = undefined;
    var _glRenderbufferStorage: fn (GLenum, GLenum, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glRenderbufferStorageMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glSampleCoverage: fn (GLfloat, GLboolean) callconv(cc) void = undefined;
    var _glSampleMaski: fn (GLuint, GLbitfield) callconv(cc) void = undefined;
    var _glScissor: fn (GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glShaderSource: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(cc) void = undefined;
    var _glStencilFunc: fn (GLenum, GLint, GLuint) callconv(cc) void = undefined;
    var _glStencilFuncSeparate: fn (GLenum, GLenum, GLint, GLuint) callconv(cc) void = undefined;
    var _glStencilMask: fn (GLuint) callconv(cc) void = undefined;
    var _glStencilMaskSeparate: fn (GLenum, GLuint) callconv(cc) void = undefined;
    var _glStencilOp: fn (GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    var _glStencilOpSeparate: fn (GLenum, GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    var _glTexBuffer: fn (GLenum, GLenum, GLuint) callconv(cc) void = undefined;
    var _glTexImage1D: fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTexImage2D: fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTexImage2DMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(cc) void = undefined;
    var _glTexImage3D: fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTexImage3DMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(cc) void = undefined;
    var _glTexParameterIiv: fn (GLenum, GLenum, [*c]const GLint) callconv(cc) void = undefined;
    var _glTexParameterIuiv: fn (GLenum, GLenum, [*c]const GLuint) callconv(cc) void = undefined;
    var _glTexParameterf: fn (GLenum, GLenum, GLfloat) callconv(cc) void = undefined;
    var _glTexParameterfv: fn (GLenum, GLenum, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glTexParameteri: fn (GLenum, GLenum, GLint) callconv(cc) void = undefined;
    var _glTexParameteriv: fn (GLenum, GLenum, [*c]const GLint) callconv(cc) void = undefined;
    var _glTexSubImage1D: fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    var _glTransformFeedbackVaryings: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(cc) void = undefined;
    var _glUniform1f: fn (GLint, GLfloat) callconv(cc) void = undefined;
    var _glUniform1fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniform1i: fn (GLint, GLint) callconv(cc) void = undefined;
    var _glUniform1iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    var _glUniform1ui: fn (GLint, GLuint) callconv(cc) void = undefined;
    var _glUniform1uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glUniform2f: fn (GLint, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glUniform2fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniform2i: fn (GLint, GLint, GLint) callconv(cc) void = undefined;
    var _glUniform2iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    var _glUniform2ui: fn (GLint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glUniform2uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glUniform3f: fn (GLint, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glUniform3fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniform3i: fn (GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    var _glUniform3iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    var _glUniform3ui: fn (GLint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glUniform3uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glUniform4f: fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glUniform4fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniform4i: fn (GLint, GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    var _glUniform4iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    var _glUniform4ui: fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glUniform4uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    var _glUniformBlockBinding: fn (GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glUniformMatrix2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix2x3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix2x4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix3x2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix3x4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix4x2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUniformMatrix4x3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glUnmapBuffer: fn (GLenum) callconv(cc) GLboolean = undefined;
    var _glUseProgram: fn (GLuint) callconv(cc) void = undefined;
    var _glValidateProgram: fn (GLuint) callconv(cc) void = undefined;
    var _glVertexAttrib1d: fn (GLuint, GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib1dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib1f: fn (GLuint, GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib1fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib1s: fn (GLuint, GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib1sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib2d: fn (GLuint, GLdouble, GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib2dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib2f: fn (GLuint, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib2fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib2s: fn (GLuint, GLshort, GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib2sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib3d: fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib3dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib3f: fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib3fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib3s: fn (GLuint, GLshort, GLshort, GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib3sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib4Nbv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    var _glVertexAttrib4Niv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttrib4Nsv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib4Nub: fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(cc) void = undefined;
    var _glVertexAttrib4Nubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    var _glVertexAttrib4Nuiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttrib4Nusv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    var _glVertexAttrib4bv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    var _glVertexAttrib4d: fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib4dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    var _glVertexAttrib4f: fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib4fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    var _glVertexAttrib4iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttrib4s: fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib4sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttrib4ubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    var _glVertexAttrib4uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttrib4usv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    var _glVertexAttribI1i: fn (GLuint, GLint) callconv(cc) void = undefined;
    var _glVertexAttribI1iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttribI1ui: fn (GLuint, GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI1uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI2i: fn (GLuint, GLint, GLint) callconv(cc) void = undefined;
    var _glVertexAttribI2iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttribI2ui: fn (GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI2uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI3i: fn (GLuint, GLint, GLint, GLint) callconv(cc) void = undefined;
    var _glVertexAttribI3iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttribI3ui: fn (GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI3uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI4bv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    var _glVertexAttribI4i: fn (GLuint, GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    var _glVertexAttribI4iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    var _glVertexAttribI4sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    var _glVertexAttribI4ubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    var _glVertexAttribI4ui: fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI4uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    var _glVertexAttribI4usv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    var _glVertexAttribIPointer: fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glVertexAttribPointer: fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    var _glViewport: fn (GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    var _glWaitSync: fn (GLsync, GLbitfield, GLuint64) callconv(cc) void = undefined;

    pub inline fn glActiveTexture(arg0: GLenum) void {
        _glActiveTexture(arg0);
    }
    pub inline fn glAttachShader(arg0: GLuint, arg1: GLuint) void {
        _glAttachShader(arg0, arg1);
    }
    pub inline fn glBeginConditionalRender(arg0: GLuint, arg1: GLenum) void {
        _glBeginConditionalRender(arg0, arg1);
    }
    pub inline fn glBeginQuery(arg0: GLenum, arg1: GLuint) void {
        _glBeginQuery(arg0, arg1);
    }
    pub inline fn glBeginTransformFeedback(arg0: GLenum) void {
        _glBeginTransformFeedback(arg0);
    }
    pub inline fn glBindAttribLocation(arg0: GLuint, arg1: GLuint, arg2: [*c]const GLchar) void {
        _glBindAttribLocation(arg0, arg1, arg2);
    }
    pub inline fn glBindBuffer(arg0: GLenum, arg1: GLuint) void {
        _glBindBuffer(arg0, arg1);
    }
    pub inline fn glBindBufferBase(arg0: GLenum, arg1: GLuint, arg2: GLuint) void {
        _glBindBufferBase(arg0, arg1, arg2);
    }
    pub inline fn glBindBufferRange(arg0: GLenum, arg1: GLuint, arg2: GLuint, arg3: GLintptr, arg4: GLsizeiptr) void {
        _glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glBindFragDataLocation(arg0: GLuint, arg1: GLuint, arg2: [*c]const GLchar) void {
        _glBindFragDataLocation(arg0, arg1, arg2);
    }
    pub inline fn glBindFramebuffer(arg0: GLenum, arg1: GLuint) void {
        _glBindFramebuffer(arg0, arg1);
    }
    pub inline fn glBindRenderbuffer(arg0: GLenum, arg1: GLuint) void {
        _glBindRenderbuffer(arg0, arg1);
    }
    pub inline fn glBindTexture(arg0: GLenum, arg1: GLuint) void {
        _glBindTexture(arg0, arg1);
    }
    pub inline fn glBindVertexArray(arg0: GLuint) void {
        _glBindVertexArray(arg0);
    }
    pub inline fn glBlendColor(arg0: GLfloat, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat) void {
        _glBlendColor(arg0, arg1, arg2, arg3);
    }
    pub inline fn glBlendEquation(arg0: GLenum) void {
        _glBlendEquation(arg0);
    }
    pub inline fn glBlendEquationSeparate(arg0: GLenum, arg1: GLenum) void {
        _glBlendEquationSeparate(arg0, arg1);
    }
    pub inline fn glBlendFunc(arg0: GLenum, arg1: GLenum) void {
        _glBlendFunc(arg0, arg1);
    }
    pub inline fn glBlendFuncSeparate(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLenum) void {
        _glBlendFuncSeparate(arg0, arg1, arg2, arg3);
    }
    pub inline fn glBlitFramebuffer(arg0: GLint, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLint, arg6: GLint, arg7: GLint, arg8: GLbitfield, arg9: GLenum) void {
        _glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    pub inline fn glBufferData(arg0: GLenum, arg1: GLsizeiptr, arg2: ?*const c_void, arg3: GLenum) void {
        _glBufferData(arg0, arg1, arg2, arg3);
    }
    pub inline fn glBufferSubData(arg0: GLenum, arg1: GLintptr, arg2: GLsizeiptr, arg3: ?*const c_void) void {
        _glBufferSubData(arg0, arg1, arg2, arg3);
    }
    pub inline fn glCheckFramebufferStatus(arg0: GLenum) GLenum {
        return _glCheckFramebufferStatus(arg0);
    }
    pub inline fn glClampColor(arg0: GLenum, arg1: GLenum) void {
        _glClampColor(arg0, arg1);
    }
    pub inline fn glClear(arg0: GLbitfield) void {
        _glClear(arg0);
    }
    pub inline fn glClearBufferfi(arg0: GLenum, arg1: GLint, arg2: GLfloat, arg3: GLint) void {
        _glClearBufferfi(arg0, arg1, arg2, arg3);
    }
    pub inline fn glClearBufferfv(arg0: GLenum, arg1: GLint, arg2: [*c]const GLfloat) void {
        _glClearBufferfv(arg0, arg1, arg2);
    }
    pub inline fn glClearBufferiv(arg0: GLenum, arg1: GLint, arg2: [*c]const GLint) void {
        _glClearBufferiv(arg0, arg1, arg2);
    }
    pub inline fn glClearBufferuiv(arg0: GLenum, arg1: GLint, arg2: [*c]const GLuint) void {
        _glClearBufferuiv(arg0, arg1, arg2);
    }
    pub inline fn glClearColor(arg0: GLfloat, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat) void {
        _glClearColor(arg0, arg1, arg2, arg3);
    }
    pub inline fn glClearDepth(arg0: GLdouble) void {
        _glClearDepth(arg0);
    }
    pub inline fn glClearStencil(arg0: GLint) void {
        _glClearStencil(arg0);
    }
    pub inline fn glClientWaitSync(arg0: GLsync, arg1: GLbitfield, arg2: GLuint64) GLenum {
        return _glClientWaitSync(arg0, arg1, arg2);
    }
    pub inline fn glColorMask(arg0: GLboolean, arg1: GLboolean, arg2: GLboolean, arg3: GLboolean) void {
        _glColorMask(arg0, arg1, arg2, arg3);
    }
    pub inline fn glColorMaski(arg0: GLuint, arg1: GLboolean, arg2: GLboolean, arg3: GLboolean, arg4: GLboolean) void {
        _glColorMaski(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glCompileShader(arg0: GLuint) void {
        _glCompileShader(arg0);
    }
    pub inline fn glCompressedTexImage1D(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLsizei, arg4: GLint, arg5: GLsizei, arg6: ?*const c_void) void {
        _glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glCompressedTexImage2D(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLsizei, arg4: GLsizei, arg5: GLint, arg6: GLsizei, arg7: ?*const c_void) void {
        _glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    pub inline fn glCompressedTexImage3D(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLsizei, arg4: GLsizei, arg5: GLsizei, arg6: GLint, arg7: GLsizei, arg8: ?*const c_void) void {
        _glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    pub inline fn glCompressedTexSubImage1D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLsizei, arg4: GLenum, arg5: GLsizei, arg6: ?*const c_void) void {
        _glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glCompressedTexSubImage2D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLsizei, arg5: GLsizei, arg6: GLenum, arg7: GLsizei, arg8: ?*const c_void) void {
        _glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    pub inline fn glCompressedTexSubImage3D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLsizei, arg6: GLsizei, arg7: GLsizei, arg8: GLenum, arg9: GLsizei, arg10: ?*const c_void) void {
        _glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    pub inline fn glCopyBufferSubData(arg0: GLenum, arg1: GLenum, arg2: GLintptr, arg3: GLintptr, arg4: GLsizeiptr) void {
        _glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glCopyTexImage1D(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLint, arg4: GLint, arg5: GLsizei, arg6: GLint) void {
        _glCopyTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glCopyTexImage2D(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLint, arg4: GLint, arg5: GLsizei, arg6: GLsizei, arg7: GLint) void {
        _glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    pub inline fn glCopyTexSubImage1D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLsizei) void {
        _glCopyTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glCopyTexSubImage2D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLint, arg6: GLsizei, arg7: GLsizei) void {
        _glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    pub inline fn glCopyTexSubImage3D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLint, arg6: GLint, arg7: GLsizei, arg8: GLsizei) void {
        _glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    pub inline fn glCreateProgram() GLuint {
        return _glCreateProgram();
    }
    pub inline fn glCreateShader(arg0: GLenum) GLuint {
        return _glCreateShader(arg0);
    }
    pub inline fn glCullFace(arg0: GLenum) void {
        _glCullFace(arg0);
    }
    pub inline fn glDeleteBuffers(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteBuffers(arg0, arg1);
    }
    pub inline fn glDeleteFramebuffers(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteFramebuffers(arg0, arg1);
    }
    pub inline fn glDeleteProgram(arg0: GLuint) void {
        _glDeleteProgram(arg0);
    }
    pub inline fn glDeleteQueries(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteQueries(arg0, arg1);
    }
    pub inline fn glDeleteRenderbuffers(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteRenderbuffers(arg0, arg1);
    }
    pub inline fn glDeleteShader(arg0: GLuint) void {
        _glDeleteShader(arg0);
    }
    pub inline fn glDeleteSync(arg0: GLsync) void {
        _glDeleteSync(arg0);
    }
    pub inline fn glDeleteTextures(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteTextures(arg0, arg1);
    }
    pub inline fn glDeleteVertexArrays(arg0: GLsizei, arg1: [*c]const GLuint) void {
        _glDeleteVertexArrays(arg0, arg1);
    }
    pub inline fn glDepthFunc(arg0: GLenum) void {
        _glDepthFunc(arg0);
    }
    pub inline fn glDepthMask(arg0: GLboolean) void {
        _glDepthMask(arg0);
    }
    pub inline fn glDepthRange(arg0: GLdouble, arg1: GLdouble) void {
        _glDepthRange(arg0, arg1);
    }
    pub inline fn glDetachShader(arg0: GLuint, arg1: GLuint) void {
        _glDetachShader(arg0, arg1);
    }
    pub inline fn glDisable(arg0: GLenum) void {
        _glDisable(arg0);
    }
    pub inline fn glDisableVertexAttribArray(arg0: GLuint) void {
        _glDisableVertexAttribArray(arg0);
    }
    pub inline fn glDisablei(arg0: GLenum, arg1: GLuint) void {
        _glDisablei(arg0, arg1);
    }
    pub inline fn glDrawArrays(arg0: GLenum, arg1: GLint, arg2: GLsizei) void {
        _glDrawArrays(arg0, arg1, arg2);
    }
    pub inline fn glDrawArraysInstanced(arg0: GLenum, arg1: GLint, arg2: GLsizei, arg3: GLsizei) void {
        _glDrawArraysInstanced(arg0, arg1, arg2, arg3);
    }
    pub inline fn glDrawBuffer(arg0: GLenum) void {
        _glDrawBuffer(arg0);
    }
    pub inline fn glDrawBuffers(arg0: GLsizei, arg1: [*c]const GLenum) void {
        _glDrawBuffers(arg0, arg1);
    }
    pub inline fn glDrawElements(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: ?*const c_void) void {
        _glDrawElements(arg0, arg1, arg2, arg3);
    }
    pub inline fn glDrawElementsBaseVertex(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: ?*const c_void, arg4: GLint) void {
        _glDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glDrawElementsInstanced(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: ?*const c_void, arg4: GLsizei) void {
        _glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glDrawElementsInstancedBaseVertex(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: ?*const c_void, arg4: GLsizei, arg5: GLint) void {
        _glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glDrawRangeElements(arg0: GLenum, arg1: GLuint, arg2: GLuint, arg3: GLsizei, arg4: GLenum, arg5: ?*const c_void) void {
        _glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glDrawRangeElementsBaseVertex(arg0: GLenum, arg1: GLuint, arg2: GLuint, arg3: GLsizei, arg4: GLenum, arg5: ?*const c_void, arg6: GLint) void {
        _glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glEnable(arg0: GLenum) void {
        _glEnable(arg0);
    }
    pub inline fn glEnableVertexAttribArray(arg0: GLuint) void {
        _glEnableVertexAttribArray(arg0);
    }
    pub inline fn glEnablei(arg0: GLenum, arg1: GLuint) void {
        _glEnablei(arg0, arg1);
    }
    pub inline fn glEndConditionalRender() void {
        _glEndConditionalRender();
    }
    pub inline fn glEndQuery(arg0: GLenum) void {
        _glEndQuery(arg0);
    }
    pub inline fn glEndTransformFeedback() void {
        _glEndTransformFeedback();
    }
    pub inline fn glFenceSync(arg0: GLenum, arg1: GLbitfield) GLsync {
        return _glFenceSync(arg0, arg1);
    }
    pub inline fn glFinish() void {
        _glFinish();
    }
    pub inline fn glFlush() void {
        _glFlush();
    }
    pub inline fn glFlushMappedBufferRange(arg0: GLenum, arg1: GLintptr, arg2: GLsizeiptr) void {
        _glFlushMappedBufferRange(arg0, arg1, arg2);
    }
    pub inline fn glFramebufferRenderbuffer(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLuint) void {
        _glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    }
    pub inline fn glFramebufferTexture(arg0: GLenum, arg1: GLenum, arg2: GLuint, arg3: GLint) void {
        _glFramebufferTexture(arg0, arg1, arg2, arg3);
    }
    pub inline fn glFramebufferTexture1D(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLuint, arg4: GLint) void {
        _glFramebufferTexture1D(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glFramebufferTexture2D(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLuint, arg4: GLint) void {
        _glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glFramebufferTexture3D(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLuint, arg4: GLint, arg5: GLint) void {
        _glFramebufferTexture3D(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glFramebufferTextureLayer(arg0: GLenum, arg1: GLenum, arg2: GLuint, arg3: GLint, arg4: GLint) void {
        _glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glFrontFace(arg0: GLenum) void {
        _glFrontFace(arg0);
    }
    pub inline fn glGenBuffers(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenBuffers(arg0, arg1);
    }
    pub inline fn glGenFramebuffers(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenFramebuffers(arg0, arg1);
    }
    pub inline fn glGenQueries(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenQueries(arg0, arg1);
    }
    pub inline fn glGenRenderbuffers(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenRenderbuffers(arg0, arg1);
    }
    pub inline fn glGenTextures(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenTextures(arg0, arg1);
    }
    pub inline fn glGenVertexArrays(arg0: GLsizei, arg1: [*c]GLuint) void {
        _glGenVertexArrays(arg0, arg1);
    }
    pub inline fn glGenerateMipmap(arg0: GLenum) void {
        _glGenerateMipmap(arg0);
    }
    pub inline fn glGetActiveAttrib(arg0: GLuint, arg1: GLuint, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLint, arg5: [*c]GLenum, arg6: [*c]GLchar) void {
        _glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glGetActiveUniform(arg0: GLuint, arg1: GLuint, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLint, arg5: [*c]GLenum, arg6: [*c]GLchar) void {
        _glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glGetActiveUniformBlockName(arg0: GLuint, arg1: GLuint, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLchar) void {
        _glGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glGetActiveUniformBlockiv(arg0: GLuint, arg1: GLuint, arg2: GLenum, arg3: [*c]GLint) void {
        _glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetActiveUniformName(arg0: GLuint, arg1: GLuint, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLchar) void {
        _glGetActiveUniformName(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glGetActiveUniformsiv(arg0: GLuint, arg1: GLsizei, arg2: [*c]const GLuint, arg3: GLenum, arg4: [*c]GLint) void {
        _glGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glGetAttachedShaders(arg0: GLuint, arg1: GLsizei, arg2: [*c]GLsizei, arg3: [*c]GLuint) void {
        _glGetAttachedShaders(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetAttribLocation(arg0: GLuint, arg1: [*c]const GLchar) GLint {
        return _glGetAttribLocation(arg0, arg1);
    }
    pub inline fn glGetBooleani_v(arg0: GLenum, arg1: GLuint, arg2: [*c]GLboolean) void {
        _glGetBooleani_v(arg0, arg1, arg2);
    }
    pub inline fn glGetBooleanv(arg0: GLenum, arg1: [*c]GLboolean) void {
        _glGetBooleanv(arg0, arg1);
    }
    pub inline fn glGetBufferParameteri64v(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint64) void {
        _glGetBufferParameteri64v(arg0, arg1, arg2);
    }
    pub inline fn glGetBufferParameteriv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetBufferParameteriv(arg0, arg1, arg2);
    }
    pub inline fn glGetBufferPointerv(arg0: GLenum, arg1: GLenum, arg2: [*c]?*c_void) void {
        _glGetBufferPointerv(arg0, arg1, arg2);
    }
    pub inline fn glGetBufferSubData(arg0: GLenum, arg1: GLintptr, arg2: GLsizeiptr, arg3: ?*c_void) void {
        _glGetBufferSubData(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetCompressedTexImage(arg0: GLenum, arg1: GLint, arg2: ?*c_void) void {
        _glGetCompressedTexImage(arg0, arg1, arg2);
    }
    pub inline fn glGetDoublev(arg0: GLenum, arg1: [*c]GLdouble) void {
        _glGetDoublev(arg0, arg1);
    }
    pub inline fn glGetError() GLenum {
        return _glGetError();
    }
    pub inline fn glGetFloatv(arg0: GLenum, arg1: [*c]GLfloat) void {
        _glGetFloatv(arg0, arg1);
    }
    pub inline fn glGetFragDataLocation(arg0: GLuint, arg1: [*c]const GLchar) GLint {
        return _glGetFragDataLocation(arg0, arg1);
    }
    pub inline fn glGetFramebufferAttachmentParameteriv(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: [*c]GLint) void {
        _glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetInteger64i_v(arg0: GLenum, arg1: GLuint, arg2: [*c]GLint64) void {
        _glGetInteger64i_v(arg0, arg1, arg2);
    }
    pub inline fn glGetInteger64v(arg0: GLenum, arg1: [*c]GLint64) void {
        _glGetInteger64v(arg0, arg1);
    }
    pub inline fn glGetIntegeri_v(arg0: GLenum, arg1: GLuint, arg2: [*c]GLint) void {
        _glGetIntegeri_v(arg0, arg1, arg2);
    }
    pub inline fn glGetIntegerv(arg0: GLenum, arg1: [*c]GLint) void {
        _glGetIntegerv(arg0, arg1);
    }
    pub inline fn glGetMultisamplefv(arg0: GLenum, arg1: GLuint, arg2: [*c]GLfloat) void {
        _glGetMultisamplefv(arg0, arg1, arg2);
    }
    pub inline fn glGetProgramInfoLog(arg0: GLuint, arg1: GLsizei, arg2: [*c]GLsizei, arg3: [*c]GLchar) void {
        _glGetProgramInfoLog(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetProgramiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetProgramiv(arg0, arg1, arg2);
    }
    pub inline fn glGetQueryObjectiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetQueryObjectiv(arg0, arg1, arg2);
    }
    pub inline fn glGetQueryObjectuiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLuint) void {
        _glGetQueryObjectuiv(arg0, arg1, arg2);
    }
    pub inline fn glGetQueryiv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetQueryiv(arg0, arg1, arg2);
    }
    pub inline fn glGetRenderbufferParameteriv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetRenderbufferParameteriv(arg0, arg1, arg2);
    }
    pub inline fn glGetShaderInfoLog(arg0: GLuint, arg1: GLsizei, arg2: [*c]GLsizei, arg3: [*c]GLchar) void {
        _glGetShaderInfoLog(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetShaderSource(arg0: GLuint, arg1: GLsizei, arg2: [*c]GLsizei, arg3: [*c]GLchar) void {
        _glGetShaderSource(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetShaderiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetShaderiv(arg0, arg1, arg2);
    }
    pub inline fn glGetString(arg0: GLenum) [*c]const GLubyte {
        return _glGetString(arg0);
    }
    pub inline fn glGetStringi(arg0: GLenum, arg1: GLuint) [*c]const GLubyte {
        return _glGetStringi(arg0, arg1);
    }
    pub inline fn glGetSynciv(arg0: GLsync, arg1: GLenum, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLint) void {
        _glGetSynciv(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glGetTexImage(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: GLenum, arg4: ?*c_void) void {
        _glGetTexImage(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glGetTexLevelParameterfv(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: [*c]GLfloat) void {
        _glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetTexLevelParameteriv(arg0: GLenum, arg1: GLint, arg2: GLenum, arg3: [*c]GLint) void {
        _glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetTexParameterIiv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetTexParameterIiv(arg0, arg1, arg2);
    }
    pub inline fn glGetTexParameterIuiv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLuint) void {
        _glGetTexParameterIuiv(arg0, arg1, arg2);
    }
    pub inline fn glGetTexParameterfv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLfloat) void {
        _glGetTexParameterfv(arg0, arg1, arg2);
    }
    pub inline fn glGetTexParameteriv(arg0: GLenum, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetTexParameteriv(arg0, arg1, arg2);
    }
    pub inline fn glGetTransformFeedbackVarying(arg0: GLuint, arg1: GLuint, arg2: GLsizei, arg3: [*c]GLsizei, arg4: [*c]GLsizei, arg5: [*c]GLenum, arg6: [*c]GLchar) void {
        _glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glGetUniformBlockIndex(arg0: GLuint, arg1: [*c]const GLchar) GLuint {
        return _glGetUniformBlockIndex(arg0, arg1);
    }
    pub inline fn glGetUniformIndices(arg0: GLuint, arg1: GLsizei, arg2: [*c]const [*c]const GLchar, arg3: [*c]GLuint) void {
        _glGetUniformIndices(arg0, arg1, arg2, arg3);
    }
    pub inline fn glGetUniformLocation(arg0: GLuint, arg1: [*c]const GLchar) GLint {
        return _glGetUniformLocation(arg0, arg1);
    }
    pub inline fn glGetUniformfv(arg0: GLuint, arg1: GLint, arg2: [*c]GLfloat) void {
        _glGetUniformfv(arg0, arg1, arg2);
    }
    pub inline fn glGetUniformiv(arg0: GLuint, arg1: GLint, arg2: [*c]GLint) void {
        _glGetUniformiv(arg0, arg1, arg2);
    }
    pub inline fn glGetUniformuiv(arg0: GLuint, arg1: GLint, arg2: [*c]GLuint) void {
        _glGetUniformuiv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribIiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetVertexAttribIiv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribIuiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLuint) void {
        _glGetVertexAttribIuiv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribPointerv(arg0: GLuint, arg1: GLenum, arg2: [*c]?*c_void) void {
        _glGetVertexAttribPointerv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribdv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLdouble) void {
        _glGetVertexAttribdv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribfv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLfloat) void {
        _glGetVertexAttribfv(arg0, arg1, arg2);
    }
    pub inline fn glGetVertexAttribiv(arg0: GLuint, arg1: GLenum, arg2: [*c]GLint) void {
        _glGetVertexAttribiv(arg0, arg1, arg2);
    }
    pub inline fn glHint(arg0: GLenum, arg1: GLenum) void {
        _glHint(arg0, arg1);
    }
    pub inline fn glIsBuffer(arg0: GLuint) GLboolean {
        return _glIsBuffer(arg0);
    }
    pub inline fn glIsEnabled(arg0: GLenum) GLboolean {
        return _glIsEnabled(arg0);
    }
    pub inline fn glIsEnabledi(arg0: GLenum, arg1: GLuint) GLboolean {
        return _glIsEnabledi(arg0, arg1);
    }
    pub inline fn glIsFramebuffer(arg0: GLuint) GLboolean {
        return _glIsFramebuffer(arg0);
    }
    pub inline fn glIsProgram(arg0: GLuint) GLboolean {
        return _glIsProgram(arg0);
    }
    pub inline fn glIsQuery(arg0: GLuint) GLboolean {
        return _glIsQuery(arg0);
    }
    pub inline fn glIsRenderbuffer(arg0: GLuint) GLboolean {
        return _glIsRenderbuffer(arg0);
    }
    pub inline fn glIsShader(arg0: GLuint) GLboolean {
        return _glIsShader(arg0);
    }
    pub inline fn glIsSync(arg0: GLsync) GLboolean {
        return _glIsSync(arg0);
    }
    pub inline fn glIsTexture(arg0: GLuint) GLboolean {
        return _glIsTexture(arg0);
    }
    pub inline fn glIsVertexArray(arg0: GLuint) GLboolean {
        return _glIsVertexArray(arg0);
    }
    pub inline fn glLineWidth(arg0: GLfloat) void {
        _glLineWidth(arg0);
    }
    pub inline fn glLinkProgram(arg0: GLuint) void {
        _glLinkProgram(arg0);
    }
    pub inline fn glLogicOp(arg0: GLenum) void {
        _glLogicOp(arg0);
    }
    pub inline fn glMapBuffer(arg0: GLenum, arg1: GLenum) ?*c_void {
        return _glMapBuffer(arg0, arg1);
    }
    pub inline fn glMapBufferRange(arg0: GLenum, arg1: GLintptr, arg2: GLsizeiptr, arg3: GLbitfield) ?*c_void {
        return _glMapBufferRange(arg0, arg1, arg2, arg3);
    }
    pub inline fn glMultiDrawArrays(arg0: GLenum, arg1: [*c]const GLint, arg2: [*c]const GLsizei, arg3: GLsizei) void {
        _glMultiDrawArrays(arg0, arg1, arg2, arg3);
    }
    pub inline fn glMultiDrawElements(arg0: GLenum, arg1: [*c]const GLsizei, arg2: GLenum, arg3: [*c]const ?*const c_void, arg4: GLsizei) void {
        _glMultiDrawElements(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glMultiDrawElementsBaseVertex(arg0: GLenum, arg1: [*c]const GLsizei, arg2: GLenum, arg3: [*c]const ?*const c_void, arg4: GLsizei, arg5: [*c]const GLint) void {
        _glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glPixelStoref(arg0: GLenum, arg1: GLfloat) void {
        _glPixelStoref(arg0, arg1);
    }
    pub inline fn glPixelStorei(arg0: GLenum, arg1: GLint) void {
        _glPixelStorei(arg0, arg1);
    }
    pub inline fn glPointParameterf(arg0: GLenum, arg1: GLfloat) void {
        _glPointParameterf(arg0, arg1);
    }
    pub inline fn glPointParameterfv(arg0: GLenum, arg1: [*c]const GLfloat) void {
        _glPointParameterfv(arg0, arg1);
    }
    pub inline fn glPointParameteri(arg0: GLenum, arg1: GLint) void {
        _glPointParameteri(arg0, arg1);
    }
    pub inline fn glPointParameteriv(arg0: GLenum, arg1: [*c]const GLint) void {
        _glPointParameteriv(arg0, arg1);
    }
    pub inline fn glPointSize(arg0: GLfloat) void {
        _glPointSize(arg0);
    }
    pub inline fn glPolygonMode(arg0: GLenum, arg1: GLenum) void {
        _glPolygonMode(arg0, arg1);
    }
    pub inline fn glPolygonOffset(arg0: GLfloat, arg1: GLfloat) void {
        _glPolygonOffset(arg0, arg1);
    }
    pub inline fn glPrimitiveRestartIndex(arg0: GLuint) void {
        _glPrimitiveRestartIndex(arg0);
    }
    pub inline fn glProvokingVertex(arg0: GLenum) void {
        _glProvokingVertex(arg0);
    }
    pub inline fn glReadBuffer(arg0: GLenum) void {
        _glReadBuffer(arg0);
    }
    pub inline fn glReadPixels(arg0: GLint, arg1: GLint, arg2: GLsizei, arg3: GLsizei, arg4: GLenum, arg5: GLenum, arg6: ?*c_void) void {
        _glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glRenderbufferStorage(arg0: GLenum, arg1: GLenum, arg2: GLsizei, arg3: GLsizei) void {
        _glRenderbufferStorage(arg0, arg1, arg2, arg3);
    }
    pub inline fn glRenderbufferStorageMultisample(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: GLsizei, arg4: GLsizei) void {
        _glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glSampleCoverage(arg0: GLfloat, arg1: GLboolean) void {
        _glSampleCoverage(arg0, arg1);
    }
    pub inline fn glSampleMaski(arg0: GLuint, arg1: GLbitfield) void {
        _glSampleMaski(arg0, arg1);
    }
    pub inline fn glScissor(arg0: GLint, arg1: GLint, arg2: GLsizei, arg3: GLsizei) void {
        _glScissor(arg0, arg1, arg2, arg3);
    }
    pub inline fn glShaderSource(arg0: GLuint, arg1: GLsizei, arg2: [*c]const [*c]const GLchar, arg3: [*c]const GLint) void {
        _glShaderSource(arg0, arg1, arg2, arg3);
    }
    pub inline fn glStencilFunc(arg0: GLenum, arg1: GLint, arg2: GLuint) void {
        _glStencilFunc(arg0, arg1, arg2);
    }
    pub inline fn glStencilFuncSeparate(arg0: GLenum, arg1: GLenum, arg2: GLint, arg3: GLuint) void {
        _glStencilFuncSeparate(arg0, arg1, arg2, arg3);
    }
    pub inline fn glStencilMask(arg0: GLuint) void {
        _glStencilMask(arg0);
    }
    pub inline fn glStencilMaskSeparate(arg0: GLenum, arg1: GLuint) void {
        _glStencilMaskSeparate(arg0, arg1);
    }
    pub inline fn glStencilOp(arg0: GLenum, arg1: GLenum, arg2: GLenum) void {
        _glStencilOp(arg0, arg1, arg2);
    }
    pub inline fn glStencilOpSeparate(arg0: GLenum, arg1: GLenum, arg2: GLenum, arg3: GLenum) void {
        _glStencilOpSeparate(arg0, arg1, arg2, arg3);
    }
    pub inline fn glTexBuffer(arg0: GLenum, arg1: GLenum, arg2: GLuint) void {
        _glTexBuffer(arg0, arg1, arg2);
    }
    pub inline fn glTexImage1D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLsizei, arg4: GLint, arg5: GLenum, arg6: GLenum, arg7: ?*const c_void) void {
        _glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    pub inline fn glTexImage2D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLsizei, arg4: GLsizei, arg5: GLint, arg6: GLenum, arg7: GLenum, arg8: ?*const c_void) void {
        _glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    pub inline fn glTexImage2DMultisample(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: GLsizei, arg4: GLsizei, arg5: GLboolean) void {
        _glTexImage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glTexImage3D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLsizei, arg4: GLsizei, arg5: GLsizei, arg6: GLint, arg7: GLenum, arg8: GLenum, arg9: ?*const c_void) void {
        _glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    pub inline fn glTexImage3DMultisample(arg0: GLenum, arg1: GLsizei, arg2: GLenum, arg3: GLsizei, arg4: GLsizei, arg5: GLsizei, arg6: GLboolean) void {
        _glTexImage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glTexParameterIiv(arg0: GLenum, arg1: GLenum, arg2: [*c]const GLint) void {
        _glTexParameterIiv(arg0, arg1, arg2);
    }
    pub inline fn glTexParameterIuiv(arg0: GLenum, arg1: GLenum, arg2: [*c]const GLuint) void {
        _glTexParameterIuiv(arg0, arg1, arg2);
    }
    pub inline fn glTexParameterf(arg0: GLenum, arg1: GLenum, arg2: GLfloat) void {
        _glTexParameterf(arg0, arg1, arg2);
    }
    pub inline fn glTexParameterfv(arg0: GLenum, arg1: GLenum, arg2: [*c]const GLfloat) void {
        _glTexParameterfv(arg0, arg1, arg2);
    }
    pub inline fn glTexParameteri(arg0: GLenum, arg1: GLenum, arg2: GLint) void {
        _glTexParameteri(arg0, arg1, arg2);
    }
    pub inline fn glTexParameteriv(arg0: GLenum, arg1: GLenum, arg2: [*c]const GLint) void {
        _glTexParameteriv(arg0, arg1, arg2);
    }
    pub inline fn glTexSubImage1D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLsizei, arg4: GLenum, arg5: GLenum, arg6: ?*const c_void) void {
        _glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    pub inline fn glTexSubImage2D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLsizei, arg5: GLsizei, arg6: GLenum, arg7: GLenum, arg8: ?*const c_void) void {
        _glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    pub inline fn glTexSubImage3D(arg0: GLenum, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint, arg5: GLsizei, arg6: GLsizei, arg7: GLsizei, arg8: GLenum, arg9: GLenum, arg10: ?*const c_void) void {
        _glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    pub inline fn glTransformFeedbackVaryings(arg0: GLuint, arg1: GLsizei, arg2: [*c]const [*c]const GLchar, arg3: GLenum) void {
        _glTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniform1f(arg0: GLint, arg1: GLfloat) void {
        _glUniform1f(arg0, arg1);
    }
    pub inline fn glUniform1fv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLfloat) void {
        _glUniform1fv(arg0, arg1, arg2);
    }
    pub inline fn glUniform1i(arg0: GLint, arg1: GLint) void {
        _glUniform1i(arg0, arg1);
    }
    pub inline fn glUniform1iv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLint) void {
        _glUniform1iv(arg0, arg1, arg2);
    }
    pub inline fn glUniform1ui(arg0: GLint, arg1: GLuint) void {
        _glUniform1ui(arg0, arg1);
    }
    pub inline fn glUniform1uiv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLuint) void {
        _glUniform1uiv(arg0, arg1, arg2);
    }
    pub inline fn glUniform2f(arg0: GLint, arg1: GLfloat, arg2: GLfloat) void {
        _glUniform2f(arg0, arg1, arg2);
    }
    pub inline fn glUniform2fv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLfloat) void {
        _glUniform2fv(arg0, arg1, arg2);
    }
    pub inline fn glUniform2i(arg0: GLint, arg1: GLint, arg2: GLint) void {
        _glUniform2i(arg0, arg1, arg2);
    }
    pub inline fn glUniform2iv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLint) void {
        _glUniform2iv(arg0, arg1, arg2);
    }
    pub inline fn glUniform2ui(arg0: GLint, arg1: GLuint, arg2: GLuint) void {
        _glUniform2ui(arg0, arg1, arg2);
    }
    pub inline fn glUniform2uiv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLuint) void {
        _glUniform2uiv(arg0, arg1, arg2);
    }
    pub inline fn glUniform3f(arg0: GLint, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat) void {
        _glUniform3f(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniform3fv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLfloat) void {
        _glUniform3fv(arg0, arg1, arg2);
    }
    pub inline fn glUniform3i(arg0: GLint, arg1: GLint, arg2: GLint, arg3: GLint) void {
        _glUniform3i(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniform3iv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLint) void {
        _glUniform3iv(arg0, arg1, arg2);
    }
    pub inline fn glUniform3ui(arg0: GLint, arg1: GLuint, arg2: GLuint, arg3: GLuint) void {
        _glUniform3ui(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniform3uiv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLuint) void {
        _glUniform3uiv(arg0, arg1, arg2);
    }
    pub inline fn glUniform4f(arg0: GLint, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat, arg4: GLfloat) void {
        _glUniform4f(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glUniform4fv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLfloat) void {
        _glUniform4fv(arg0, arg1, arg2);
    }
    pub inline fn glUniform4i(arg0: GLint, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint) void {
        _glUniform4i(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glUniform4iv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLint) void {
        _glUniform4iv(arg0, arg1, arg2);
    }
    pub inline fn glUniform4ui(arg0: GLint, arg1: GLuint, arg2: GLuint, arg3: GLuint, arg4: GLuint) void {
        _glUniform4ui(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glUniform4uiv(arg0: GLint, arg1: GLsizei, arg2: [*c]const GLuint) void {
        _glUniform4uiv(arg0, arg1, arg2);
    }
    pub inline fn glUniformBlockBinding(arg0: GLuint, arg1: GLuint, arg2: GLuint) void {
        _glUniformBlockBinding(arg0, arg1, arg2);
    }
    pub inline fn glUniformMatrix2fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix2fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix2x3fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix2x4fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix3fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix3fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix3x2fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix3x4fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix4fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix4fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix4x2fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUniformMatrix4x3fv(arg0: GLint, arg1: GLsizei, arg2: GLboolean, arg3: [*c]const GLfloat) void {
        _glUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
    }
    pub inline fn glUnmapBuffer(arg0: GLenum) GLboolean {
        return _glUnmapBuffer(arg0);
    }
    pub inline fn glUseProgram(arg0: GLuint) void {
        _glUseProgram(arg0);
    }
    pub inline fn glValidateProgram(arg0: GLuint) void {
        _glValidateProgram(arg0);
    }
    pub inline fn glVertexAttrib1d(arg0: GLuint, arg1: GLdouble) void {
        _glVertexAttrib1d(arg0, arg1);
    }
    pub inline fn glVertexAttrib1dv(arg0: GLuint, arg1: [*c]const GLdouble) void {
        _glVertexAttrib1dv(arg0, arg1);
    }
    pub inline fn glVertexAttrib1f(arg0: GLuint, arg1: GLfloat) void {
        _glVertexAttrib1f(arg0, arg1);
    }
    pub inline fn glVertexAttrib1fv(arg0: GLuint, arg1: [*c]const GLfloat) void {
        _glVertexAttrib1fv(arg0, arg1);
    }
    pub inline fn glVertexAttrib1s(arg0: GLuint, arg1: GLshort) void {
        _glVertexAttrib1s(arg0, arg1);
    }
    pub inline fn glVertexAttrib1sv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttrib1sv(arg0, arg1);
    }
    pub inline fn glVertexAttrib2d(arg0: GLuint, arg1: GLdouble, arg2: GLdouble) void {
        _glVertexAttrib2d(arg0, arg1, arg2);
    }
    pub inline fn glVertexAttrib2dv(arg0: GLuint, arg1: [*c]const GLdouble) void {
        _glVertexAttrib2dv(arg0, arg1);
    }
    pub inline fn glVertexAttrib2f(arg0: GLuint, arg1: GLfloat, arg2: GLfloat) void {
        _glVertexAttrib2f(arg0, arg1, arg2);
    }
    pub inline fn glVertexAttrib2fv(arg0: GLuint, arg1: [*c]const GLfloat) void {
        _glVertexAttrib2fv(arg0, arg1);
    }
    pub inline fn glVertexAttrib2s(arg0: GLuint, arg1: GLshort, arg2: GLshort) void {
        _glVertexAttrib2s(arg0, arg1, arg2);
    }
    pub inline fn glVertexAttrib2sv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttrib2sv(arg0, arg1);
    }
    pub inline fn glVertexAttrib3d(arg0: GLuint, arg1: GLdouble, arg2: GLdouble, arg3: GLdouble) void {
        _glVertexAttrib3d(arg0, arg1, arg2, arg3);
    }
    pub inline fn glVertexAttrib3dv(arg0: GLuint, arg1: [*c]const GLdouble) void {
        _glVertexAttrib3dv(arg0, arg1);
    }
    pub inline fn glVertexAttrib3f(arg0: GLuint, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat) void {
        _glVertexAttrib3f(arg0, arg1, arg2, arg3);
    }
    pub inline fn glVertexAttrib3fv(arg0: GLuint, arg1: [*c]const GLfloat) void {
        _glVertexAttrib3fv(arg0, arg1);
    }
    pub inline fn glVertexAttrib3s(arg0: GLuint, arg1: GLshort, arg2: GLshort, arg3: GLshort) void {
        _glVertexAttrib3s(arg0, arg1, arg2, arg3);
    }
    pub inline fn glVertexAttrib3sv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttrib3sv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Nbv(arg0: GLuint, arg1: [*c]const GLbyte) void {
        _glVertexAttrib4Nbv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Niv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttrib4Niv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Nsv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttrib4Nsv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Nub(arg0: GLuint, arg1: GLubyte, arg2: GLubyte, arg3: GLubyte, arg4: GLubyte) void {
        _glVertexAttrib4Nub(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttrib4Nubv(arg0: GLuint, arg1: [*c]const GLubyte) void {
        _glVertexAttrib4Nubv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Nuiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttrib4Nuiv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4Nusv(arg0: GLuint, arg1: [*c]const GLushort) void {
        _glVertexAttrib4Nusv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4bv(arg0: GLuint, arg1: [*c]const GLbyte) void {
        _glVertexAttrib4bv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4d(arg0: GLuint, arg1: GLdouble, arg2: GLdouble, arg3: GLdouble, arg4: GLdouble) void {
        _glVertexAttrib4d(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttrib4dv(arg0: GLuint, arg1: [*c]const GLdouble) void {
        _glVertexAttrib4dv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4f(arg0: GLuint, arg1: GLfloat, arg2: GLfloat, arg3: GLfloat, arg4: GLfloat) void {
        _glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttrib4fv(arg0: GLuint, arg1: [*c]const GLfloat) void {
        _glVertexAttrib4fv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4iv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttrib4iv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4s(arg0: GLuint, arg1: GLshort, arg2: GLshort, arg3: GLshort, arg4: GLshort) void {
        _glVertexAttrib4s(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttrib4sv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttrib4sv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4ubv(arg0: GLuint, arg1: [*c]const GLubyte) void {
        _glVertexAttrib4ubv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4uiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttrib4uiv(arg0, arg1);
    }
    pub inline fn glVertexAttrib4usv(arg0: GLuint, arg1: [*c]const GLushort) void {
        _glVertexAttrib4usv(arg0, arg1);
    }
    pub inline fn glVertexAttribI1i(arg0: GLuint, arg1: GLint) void {
        _glVertexAttribI1i(arg0, arg1);
    }
    pub inline fn glVertexAttribI1iv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttribI1iv(arg0, arg1);
    }
    pub inline fn glVertexAttribI1ui(arg0: GLuint, arg1: GLuint) void {
        _glVertexAttribI1ui(arg0, arg1);
    }
    pub inline fn glVertexAttribI1uiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttribI1uiv(arg0, arg1);
    }
    pub inline fn glVertexAttribI2i(arg0: GLuint, arg1: GLint, arg2: GLint) void {
        _glVertexAttribI2i(arg0, arg1, arg2);
    }
    pub inline fn glVertexAttribI2iv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttribI2iv(arg0, arg1);
    }
    pub inline fn glVertexAttribI2ui(arg0: GLuint, arg1: GLuint, arg2: GLuint) void {
        _glVertexAttribI2ui(arg0, arg1, arg2);
    }
    pub inline fn glVertexAttribI2uiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttribI2uiv(arg0, arg1);
    }
    pub inline fn glVertexAttribI3i(arg0: GLuint, arg1: GLint, arg2: GLint, arg3: GLint) void {
        _glVertexAttribI3i(arg0, arg1, arg2, arg3);
    }
    pub inline fn glVertexAttribI3iv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttribI3iv(arg0, arg1);
    }
    pub inline fn glVertexAttribI3ui(arg0: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) void {
        _glVertexAttribI3ui(arg0, arg1, arg2, arg3);
    }
    pub inline fn glVertexAttribI3uiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttribI3uiv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4bv(arg0: GLuint, arg1: [*c]const GLbyte) void {
        _glVertexAttribI4bv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4i(arg0: GLuint, arg1: GLint, arg2: GLint, arg3: GLint, arg4: GLint) void {
        _glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttribI4iv(arg0: GLuint, arg1: [*c]const GLint) void {
        _glVertexAttribI4iv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4sv(arg0: GLuint, arg1: [*c]const GLshort) void {
        _glVertexAttribI4sv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4ubv(arg0: GLuint, arg1: [*c]const GLubyte) void {
        _glVertexAttribI4ubv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4ui(arg0: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint, arg4: GLuint) void {
        _glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttribI4uiv(arg0: GLuint, arg1: [*c]const GLuint) void {
        _glVertexAttribI4uiv(arg0, arg1);
    }
    pub inline fn glVertexAttribI4usv(arg0: GLuint, arg1: [*c]const GLushort) void {
        _glVertexAttribI4usv(arg0, arg1);
    }
    pub inline fn glVertexAttribIPointer(arg0: GLuint, arg1: GLint, arg2: GLenum, arg3: GLsizei, arg4: ?*const c_void) void {
        _glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
    }
    pub inline fn glVertexAttribPointer(arg0: GLuint, arg1: GLint, arg2: GLenum, arg3: GLboolean, arg4: GLsizei, arg5: ?*const c_void) void {
        _glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    pub inline fn glViewport(arg0: GLint, arg1: GLint, arg2: GLsizei, arg3: GLsizei) void {
        _glViewport(arg0, arg1, arg2, arg3);
    }
    pub inline fn glWaitSync(arg0: GLsync, arg1: GLbitfield, arg2: GLuint64) void {
        _glWaitSync(arg0, arg1, arg2);
    }
};

pub const extensions = [_][:0]const u8{};

pub const Command = struct {
    name: [:0]const u8,
    ptr: **const c_void,
};

pub const commands = [_]Command{
    .{ .name = "glActiveTexture", .ptr = @ptrCast(**const c_void, &namespace._glActiveTexture) },
    .{ .name = "glAttachShader", .ptr = @ptrCast(**const c_void, &namespace._glAttachShader) },
    .{ .name = "glBeginConditionalRender", .ptr = @ptrCast(**const c_void, &namespace._glBeginConditionalRender) },
    .{ .name = "glBeginQuery", .ptr = @ptrCast(**const c_void, &namespace._glBeginQuery) },
    .{ .name = "glBeginTransformFeedback", .ptr = @ptrCast(**const c_void, &namespace._glBeginTransformFeedback) },
    .{ .name = "glBindAttribLocation", .ptr = @ptrCast(**const c_void, &namespace._glBindAttribLocation) },
    .{ .name = "glBindBuffer", .ptr = @ptrCast(**const c_void, &namespace._glBindBuffer) },
    .{ .name = "glBindBufferBase", .ptr = @ptrCast(**const c_void, &namespace._glBindBufferBase) },
    .{ .name = "glBindBufferRange", .ptr = @ptrCast(**const c_void, &namespace._glBindBufferRange) },
    .{ .name = "glBindFragDataLocation", .ptr = @ptrCast(**const c_void, &namespace._glBindFragDataLocation) },
    .{ .name = "glBindFramebuffer", .ptr = @ptrCast(**const c_void, &namespace._glBindFramebuffer) },
    .{ .name = "glBindRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace._glBindRenderbuffer) },
    .{ .name = "glBindTexture", .ptr = @ptrCast(**const c_void, &namespace._glBindTexture) },
    .{ .name = "glBindVertexArray", .ptr = @ptrCast(**const c_void, &namespace._glBindVertexArray) },
    .{ .name = "glBlendColor", .ptr = @ptrCast(**const c_void, &namespace._glBlendColor) },
    .{ .name = "glBlendEquation", .ptr = @ptrCast(**const c_void, &namespace._glBlendEquation) },
    .{ .name = "glBlendEquationSeparate", .ptr = @ptrCast(**const c_void, &namespace._glBlendEquationSeparate) },
    .{ .name = "glBlendFunc", .ptr = @ptrCast(**const c_void, &namespace._glBlendFunc) },
    .{ .name = "glBlendFuncSeparate", .ptr = @ptrCast(**const c_void, &namespace._glBlendFuncSeparate) },
    .{ .name = "glBlitFramebuffer", .ptr = @ptrCast(**const c_void, &namespace._glBlitFramebuffer) },
    .{ .name = "glBufferData", .ptr = @ptrCast(**const c_void, &namespace._glBufferData) },
    .{ .name = "glBufferSubData", .ptr = @ptrCast(**const c_void, &namespace._glBufferSubData) },
    .{ .name = "glCheckFramebufferStatus", .ptr = @ptrCast(**const c_void, &namespace._glCheckFramebufferStatus) },
    .{ .name = "glClampColor", .ptr = @ptrCast(**const c_void, &namespace._glClampColor) },
    .{ .name = "glClear", .ptr = @ptrCast(**const c_void, &namespace._glClear) },
    .{ .name = "glClearBufferfi", .ptr = @ptrCast(**const c_void, &namespace._glClearBufferfi) },
    .{ .name = "glClearBufferfv", .ptr = @ptrCast(**const c_void, &namespace._glClearBufferfv) },
    .{ .name = "glClearBufferiv", .ptr = @ptrCast(**const c_void, &namespace._glClearBufferiv) },
    .{ .name = "glClearBufferuiv", .ptr = @ptrCast(**const c_void, &namespace._glClearBufferuiv) },
    .{ .name = "glClearColor", .ptr = @ptrCast(**const c_void, &namespace._glClearColor) },
    .{ .name = "glClearDepth", .ptr = @ptrCast(**const c_void, &namespace._glClearDepth) },
    .{ .name = "glClearStencil", .ptr = @ptrCast(**const c_void, &namespace._glClearStencil) },
    .{ .name = "glClientWaitSync", .ptr = @ptrCast(**const c_void, &namespace._glClientWaitSync) },
    .{ .name = "glColorMask", .ptr = @ptrCast(**const c_void, &namespace._glColorMask) },
    .{ .name = "glColorMaski", .ptr = @ptrCast(**const c_void, &namespace._glColorMaski) },
    .{ .name = "glCompileShader", .ptr = @ptrCast(**const c_void, &namespace._glCompileShader) },
    .{ .name = "glCompressedTexImage1D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexImage1D) },
    .{ .name = "glCompressedTexImage2D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexImage2D) },
    .{ .name = "glCompressedTexImage3D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexImage3D) },
    .{ .name = "glCompressedTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexSubImage1D) },
    .{ .name = "glCompressedTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexSubImage2D) },
    .{ .name = "glCompressedTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace._glCompressedTexSubImage3D) },
    .{ .name = "glCopyBufferSubData", .ptr = @ptrCast(**const c_void, &namespace._glCopyBufferSubData) },
    .{ .name = "glCopyTexImage1D", .ptr = @ptrCast(**const c_void, &namespace._glCopyTexImage1D) },
    .{ .name = "glCopyTexImage2D", .ptr = @ptrCast(**const c_void, &namespace._glCopyTexImage2D) },
    .{ .name = "glCopyTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace._glCopyTexSubImage1D) },
    .{ .name = "glCopyTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace._glCopyTexSubImage2D) },
    .{ .name = "glCopyTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace._glCopyTexSubImage3D) },
    .{ .name = "glCreateProgram", .ptr = @ptrCast(**const c_void, &namespace._glCreateProgram) },
    .{ .name = "glCreateShader", .ptr = @ptrCast(**const c_void, &namespace._glCreateShader) },
    .{ .name = "glCullFace", .ptr = @ptrCast(**const c_void, &namespace._glCullFace) },
    .{ .name = "glDeleteBuffers", .ptr = @ptrCast(**const c_void, &namespace._glDeleteBuffers) },
    .{ .name = "glDeleteFramebuffers", .ptr = @ptrCast(**const c_void, &namespace._glDeleteFramebuffers) },
    .{ .name = "glDeleteProgram", .ptr = @ptrCast(**const c_void, &namespace._glDeleteProgram) },
    .{ .name = "glDeleteQueries", .ptr = @ptrCast(**const c_void, &namespace._glDeleteQueries) },
    .{ .name = "glDeleteRenderbuffers", .ptr = @ptrCast(**const c_void, &namespace._glDeleteRenderbuffers) },
    .{ .name = "glDeleteShader", .ptr = @ptrCast(**const c_void, &namespace._glDeleteShader) },
    .{ .name = "glDeleteSync", .ptr = @ptrCast(**const c_void, &namespace._glDeleteSync) },
    .{ .name = "glDeleteTextures", .ptr = @ptrCast(**const c_void, &namespace._glDeleteTextures) },
    .{ .name = "glDeleteVertexArrays", .ptr = @ptrCast(**const c_void, &namespace._glDeleteVertexArrays) },
    .{ .name = "glDepthFunc", .ptr = @ptrCast(**const c_void, &namespace._glDepthFunc) },
    .{ .name = "glDepthMask", .ptr = @ptrCast(**const c_void, &namespace._glDepthMask) },
    .{ .name = "glDepthRange", .ptr = @ptrCast(**const c_void, &namespace._glDepthRange) },
    .{ .name = "glDetachShader", .ptr = @ptrCast(**const c_void, &namespace._glDetachShader) },
    .{ .name = "glDisable", .ptr = @ptrCast(**const c_void, &namespace._glDisable) },
    .{ .name = "glDisableVertexAttribArray", .ptr = @ptrCast(**const c_void, &namespace._glDisableVertexAttribArray) },
    .{ .name = "glDisablei", .ptr = @ptrCast(**const c_void, &namespace._glDisablei) },
    .{ .name = "glDrawArrays", .ptr = @ptrCast(**const c_void, &namespace._glDrawArrays) },
    .{ .name = "glDrawArraysInstanced", .ptr = @ptrCast(**const c_void, &namespace._glDrawArraysInstanced) },
    .{ .name = "glDrawBuffer", .ptr = @ptrCast(**const c_void, &namespace._glDrawBuffer) },
    .{ .name = "glDrawBuffers", .ptr = @ptrCast(**const c_void, &namespace._glDrawBuffers) },
    .{ .name = "glDrawElements", .ptr = @ptrCast(**const c_void, &namespace._glDrawElements) },
    .{ .name = "glDrawElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace._glDrawElementsBaseVertex) },
    .{ .name = "glDrawElementsInstanced", .ptr = @ptrCast(**const c_void, &namespace._glDrawElementsInstanced) },
    .{ .name = "glDrawElementsInstancedBaseVertex", .ptr = @ptrCast(**const c_void, &namespace._glDrawElementsInstancedBaseVertex) },
    .{ .name = "glDrawRangeElements", .ptr = @ptrCast(**const c_void, &namespace._glDrawRangeElements) },
    .{ .name = "glDrawRangeElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace._glDrawRangeElementsBaseVertex) },
    .{ .name = "glEnable", .ptr = @ptrCast(**const c_void, &namespace._glEnable) },
    .{ .name = "glEnableVertexAttribArray", .ptr = @ptrCast(**const c_void, &namespace._glEnableVertexAttribArray) },
    .{ .name = "glEnablei", .ptr = @ptrCast(**const c_void, &namespace._glEnablei) },
    .{ .name = "glEndConditionalRender", .ptr = @ptrCast(**const c_void, &namespace._glEndConditionalRender) },
    .{ .name = "glEndQuery", .ptr = @ptrCast(**const c_void, &namespace._glEndQuery) },
    .{ .name = "glEndTransformFeedback", .ptr = @ptrCast(**const c_void, &namespace._glEndTransformFeedback) },
    .{ .name = "glFenceSync", .ptr = @ptrCast(**const c_void, &namespace._glFenceSync) },
    .{ .name = "glFinish", .ptr = @ptrCast(**const c_void, &namespace._glFinish) },
    .{ .name = "glFlush", .ptr = @ptrCast(**const c_void, &namespace._glFlush) },
    .{ .name = "glFlushMappedBufferRange", .ptr = @ptrCast(**const c_void, &namespace._glFlushMappedBufferRange) },
    .{ .name = "glFramebufferRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferRenderbuffer) },
    .{ .name = "glFramebufferTexture", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferTexture) },
    .{ .name = "glFramebufferTexture1D", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferTexture1D) },
    .{ .name = "glFramebufferTexture2D", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferTexture2D) },
    .{ .name = "glFramebufferTexture3D", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferTexture3D) },
    .{ .name = "glFramebufferTextureLayer", .ptr = @ptrCast(**const c_void, &namespace._glFramebufferTextureLayer) },
    .{ .name = "glFrontFace", .ptr = @ptrCast(**const c_void, &namespace._glFrontFace) },
    .{ .name = "glGenBuffers", .ptr = @ptrCast(**const c_void, &namespace._glGenBuffers) },
    .{ .name = "glGenFramebuffers", .ptr = @ptrCast(**const c_void, &namespace._glGenFramebuffers) },
    .{ .name = "glGenQueries", .ptr = @ptrCast(**const c_void, &namespace._glGenQueries) },
    .{ .name = "glGenRenderbuffers", .ptr = @ptrCast(**const c_void, &namespace._glGenRenderbuffers) },
    .{ .name = "glGenTextures", .ptr = @ptrCast(**const c_void, &namespace._glGenTextures) },
    .{ .name = "glGenVertexArrays", .ptr = @ptrCast(**const c_void, &namespace._glGenVertexArrays) },
    .{ .name = "glGenerateMipmap", .ptr = @ptrCast(**const c_void, &namespace._glGenerateMipmap) },
    .{ .name = "glGetActiveAttrib", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveAttrib) },
    .{ .name = "glGetActiveUniform", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveUniform) },
    .{ .name = "glGetActiveUniformBlockName", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveUniformBlockName) },
    .{ .name = "glGetActiveUniformBlockiv", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveUniformBlockiv) },
    .{ .name = "glGetActiveUniformName", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveUniformName) },
    .{ .name = "glGetActiveUniformsiv", .ptr = @ptrCast(**const c_void, &namespace._glGetActiveUniformsiv) },
    .{ .name = "glGetAttachedShaders", .ptr = @ptrCast(**const c_void, &namespace._glGetAttachedShaders) },
    .{ .name = "glGetAttribLocation", .ptr = @ptrCast(**const c_void, &namespace._glGetAttribLocation) },
    .{ .name = "glGetBooleani_v", .ptr = @ptrCast(**const c_void, &namespace._glGetBooleani_v) },
    .{ .name = "glGetBooleanv", .ptr = @ptrCast(**const c_void, &namespace._glGetBooleanv) },
    .{ .name = "glGetBufferParameteri64v", .ptr = @ptrCast(**const c_void, &namespace._glGetBufferParameteri64v) },
    .{ .name = "glGetBufferParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glGetBufferParameteriv) },
    .{ .name = "glGetBufferPointerv", .ptr = @ptrCast(**const c_void, &namespace._glGetBufferPointerv) },
    .{ .name = "glGetBufferSubData", .ptr = @ptrCast(**const c_void, &namespace._glGetBufferSubData) },
    .{ .name = "glGetCompressedTexImage", .ptr = @ptrCast(**const c_void, &namespace._glGetCompressedTexImage) },
    .{ .name = "glGetDoublev", .ptr = @ptrCast(**const c_void, &namespace._glGetDoublev) },
    .{ .name = "glGetError", .ptr = @ptrCast(**const c_void, &namespace._glGetError) },
    .{ .name = "glGetFloatv", .ptr = @ptrCast(**const c_void, &namespace._glGetFloatv) },
    .{ .name = "glGetFragDataLocation", .ptr = @ptrCast(**const c_void, &namespace._glGetFragDataLocation) },
    .{ .name = "glGetFramebufferAttachmentParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glGetFramebufferAttachmentParameteriv) },
    .{ .name = "glGetInteger64i_v", .ptr = @ptrCast(**const c_void, &namespace._glGetInteger64i_v) },
    .{ .name = "glGetInteger64v", .ptr = @ptrCast(**const c_void, &namespace._glGetInteger64v) },
    .{ .name = "glGetIntegeri_v", .ptr = @ptrCast(**const c_void, &namespace._glGetIntegeri_v) },
    .{ .name = "glGetIntegerv", .ptr = @ptrCast(**const c_void, &namespace._glGetIntegerv) },
    .{ .name = "glGetMultisamplefv", .ptr = @ptrCast(**const c_void, &namespace._glGetMultisamplefv) },
    .{ .name = "glGetProgramInfoLog", .ptr = @ptrCast(**const c_void, &namespace._glGetProgramInfoLog) },
    .{ .name = "glGetProgramiv", .ptr = @ptrCast(**const c_void, &namespace._glGetProgramiv) },
    .{ .name = "glGetQueryObjectiv", .ptr = @ptrCast(**const c_void, &namespace._glGetQueryObjectiv) },
    .{ .name = "glGetQueryObjectuiv", .ptr = @ptrCast(**const c_void, &namespace._glGetQueryObjectuiv) },
    .{ .name = "glGetQueryiv", .ptr = @ptrCast(**const c_void, &namespace._glGetQueryiv) },
    .{ .name = "glGetRenderbufferParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glGetRenderbufferParameteriv) },
    .{ .name = "glGetShaderInfoLog", .ptr = @ptrCast(**const c_void, &namespace._glGetShaderInfoLog) },
    .{ .name = "glGetShaderSource", .ptr = @ptrCast(**const c_void, &namespace._glGetShaderSource) },
    .{ .name = "glGetShaderiv", .ptr = @ptrCast(**const c_void, &namespace._glGetShaderiv) },
    .{ .name = "glGetString", .ptr = @ptrCast(**const c_void, &namespace._glGetString) },
    .{ .name = "glGetStringi", .ptr = @ptrCast(**const c_void, &namespace._glGetStringi) },
    .{ .name = "glGetSynciv", .ptr = @ptrCast(**const c_void, &namespace._glGetSynciv) },
    .{ .name = "glGetTexImage", .ptr = @ptrCast(**const c_void, &namespace._glGetTexImage) },
    .{ .name = "glGetTexLevelParameterfv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexLevelParameterfv) },
    .{ .name = "glGetTexLevelParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexLevelParameteriv) },
    .{ .name = "glGetTexParameterIiv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexParameterIiv) },
    .{ .name = "glGetTexParameterIuiv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexParameterIuiv) },
    .{ .name = "glGetTexParameterfv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexParameterfv) },
    .{ .name = "glGetTexParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glGetTexParameteriv) },
    .{ .name = "glGetTransformFeedbackVarying", .ptr = @ptrCast(**const c_void, &namespace._glGetTransformFeedbackVarying) },
    .{ .name = "glGetUniformBlockIndex", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformBlockIndex) },
    .{ .name = "glGetUniformIndices", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformIndices) },
    .{ .name = "glGetUniformLocation", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformLocation) },
    .{ .name = "glGetUniformfv", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformfv) },
    .{ .name = "glGetUniformiv", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformiv) },
    .{ .name = "glGetUniformuiv", .ptr = @ptrCast(**const c_void, &namespace._glGetUniformuiv) },
    .{ .name = "glGetVertexAttribIiv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribIiv) },
    .{ .name = "glGetVertexAttribIuiv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribIuiv) },
    .{ .name = "glGetVertexAttribPointerv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribPointerv) },
    .{ .name = "glGetVertexAttribdv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribdv) },
    .{ .name = "glGetVertexAttribfv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribfv) },
    .{ .name = "glGetVertexAttribiv", .ptr = @ptrCast(**const c_void, &namespace._glGetVertexAttribiv) },
    .{ .name = "glHint", .ptr = @ptrCast(**const c_void, &namespace._glHint) },
    .{ .name = "glIsBuffer", .ptr = @ptrCast(**const c_void, &namespace._glIsBuffer) },
    .{ .name = "glIsEnabled", .ptr = @ptrCast(**const c_void, &namespace._glIsEnabled) },
    .{ .name = "glIsEnabledi", .ptr = @ptrCast(**const c_void, &namespace._glIsEnabledi) },
    .{ .name = "glIsFramebuffer", .ptr = @ptrCast(**const c_void, &namespace._glIsFramebuffer) },
    .{ .name = "glIsProgram", .ptr = @ptrCast(**const c_void, &namespace._glIsProgram) },
    .{ .name = "glIsQuery", .ptr = @ptrCast(**const c_void, &namespace._glIsQuery) },
    .{ .name = "glIsRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace._glIsRenderbuffer) },
    .{ .name = "glIsShader", .ptr = @ptrCast(**const c_void, &namespace._glIsShader) },
    .{ .name = "glIsSync", .ptr = @ptrCast(**const c_void, &namespace._glIsSync) },
    .{ .name = "glIsTexture", .ptr = @ptrCast(**const c_void, &namespace._glIsTexture) },
    .{ .name = "glIsVertexArray", .ptr = @ptrCast(**const c_void, &namespace._glIsVertexArray) },
    .{ .name = "glLineWidth", .ptr = @ptrCast(**const c_void, &namespace._glLineWidth) },
    .{ .name = "glLinkProgram", .ptr = @ptrCast(**const c_void, &namespace._glLinkProgram) },
    .{ .name = "glLogicOp", .ptr = @ptrCast(**const c_void, &namespace._glLogicOp) },
    .{ .name = "glMapBuffer", .ptr = @ptrCast(**const c_void, &namespace._glMapBuffer) },
    .{ .name = "glMapBufferRange", .ptr = @ptrCast(**const c_void, &namespace._glMapBufferRange) },
    .{ .name = "glMultiDrawArrays", .ptr = @ptrCast(**const c_void, &namespace._glMultiDrawArrays) },
    .{ .name = "glMultiDrawElements", .ptr = @ptrCast(**const c_void, &namespace._glMultiDrawElements) },
    .{ .name = "glMultiDrawElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace._glMultiDrawElementsBaseVertex) },
    .{ .name = "glPixelStoref", .ptr = @ptrCast(**const c_void, &namespace._glPixelStoref) },
    .{ .name = "glPixelStorei", .ptr = @ptrCast(**const c_void, &namespace._glPixelStorei) },
    .{ .name = "glPointParameterf", .ptr = @ptrCast(**const c_void, &namespace._glPointParameterf) },
    .{ .name = "glPointParameterfv", .ptr = @ptrCast(**const c_void, &namespace._glPointParameterfv) },
    .{ .name = "glPointParameteri", .ptr = @ptrCast(**const c_void, &namespace._glPointParameteri) },
    .{ .name = "glPointParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glPointParameteriv) },
    .{ .name = "glPointSize", .ptr = @ptrCast(**const c_void, &namespace._glPointSize) },
    .{ .name = "glPolygonMode", .ptr = @ptrCast(**const c_void, &namespace._glPolygonMode) },
    .{ .name = "glPolygonOffset", .ptr = @ptrCast(**const c_void, &namespace._glPolygonOffset) },
    .{ .name = "glPrimitiveRestartIndex", .ptr = @ptrCast(**const c_void, &namespace._glPrimitiveRestartIndex) },
    .{ .name = "glProvokingVertex", .ptr = @ptrCast(**const c_void, &namespace._glProvokingVertex) },
    .{ .name = "glReadBuffer", .ptr = @ptrCast(**const c_void, &namespace._glReadBuffer) },
    .{ .name = "glReadPixels", .ptr = @ptrCast(**const c_void, &namespace._glReadPixels) },
    .{ .name = "glRenderbufferStorage", .ptr = @ptrCast(**const c_void, &namespace._glRenderbufferStorage) },
    .{ .name = "glRenderbufferStorageMultisample", .ptr = @ptrCast(**const c_void, &namespace._glRenderbufferStorageMultisample) },
    .{ .name = "glSampleCoverage", .ptr = @ptrCast(**const c_void, &namespace._glSampleCoverage) },
    .{ .name = "glSampleMaski", .ptr = @ptrCast(**const c_void, &namespace._glSampleMaski) },
    .{ .name = "glScissor", .ptr = @ptrCast(**const c_void, &namespace._glScissor) },
    .{ .name = "glShaderSource", .ptr = @ptrCast(**const c_void, &namespace._glShaderSource) },
    .{ .name = "glStencilFunc", .ptr = @ptrCast(**const c_void, &namespace._glStencilFunc) },
    .{ .name = "glStencilFuncSeparate", .ptr = @ptrCast(**const c_void, &namespace._glStencilFuncSeparate) },
    .{ .name = "glStencilMask", .ptr = @ptrCast(**const c_void, &namespace._glStencilMask) },
    .{ .name = "glStencilMaskSeparate", .ptr = @ptrCast(**const c_void, &namespace._glStencilMaskSeparate) },
    .{ .name = "glStencilOp", .ptr = @ptrCast(**const c_void, &namespace._glStencilOp) },
    .{ .name = "glStencilOpSeparate", .ptr = @ptrCast(**const c_void, &namespace._glStencilOpSeparate) },
    .{ .name = "glTexBuffer", .ptr = @ptrCast(**const c_void, &namespace._glTexBuffer) },
    .{ .name = "glTexImage1D", .ptr = @ptrCast(**const c_void, &namespace._glTexImage1D) },
    .{ .name = "glTexImage2D", .ptr = @ptrCast(**const c_void, &namespace._glTexImage2D) },
    .{ .name = "glTexImage2DMultisample", .ptr = @ptrCast(**const c_void, &namespace._glTexImage2DMultisample) },
    .{ .name = "glTexImage3D", .ptr = @ptrCast(**const c_void, &namespace._glTexImage3D) },
    .{ .name = "glTexImage3DMultisample", .ptr = @ptrCast(**const c_void, &namespace._glTexImage3DMultisample) },
    .{ .name = "glTexParameterIiv", .ptr = @ptrCast(**const c_void, &namespace._glTexParameterIiv) },
    .{ .name = "glTexParameterIuiv", .ptr = @ptrCast(**const c_void, &namespace._glTexParameterIuiv) },
    .{ .name = "glTexParameterf", .ptr = @ptrCast(**const c_void, &namespace._glTexParameterf) },
    .{ .name = "glTexParameterfv", .ptr = @ptrCast(**const c_void, &namespace._glTexParameterfv) },
    .{ .name = "glTexParameteri", .ptr = @ptrCast(**const c_void, &namespace._glTexParameteri) },
    .{ .name = "glTexParameteriv", .ptr = @ptrCast(**const c_void, &namespace._glTexParameteriv) },
    .{ .name = "glTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace._glTexSubImage1D) },
    .{ .name = "glTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace._glTexSubImage2D) },
    .{ .name = "glTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace._glTexSubImage3D) },
    .{ .name = "glTransformFeedbackVaryings", .ptr = @ptrCast(**const c_void, &namespace._glTransformFeedbackVaryings) },
    .{ .name = "glUniform1f", .ptr = @ptrCast(**const c_void, &namespace._glUniform1f) },
    .{ .name = "glUniform1fv", .ptr = @ptrCast(**const c_void, &namespace._glUniform1fv) },
    .{ .name = "glUniform1i", .ptr = @ptrCast(**const c_void, &namespace._glUniform1i) },
    .{ .name = "glUniform1iv", .ptr = @ptrCast(**const c_void, &namespace._glUniform1iv) },
    .{ .name = "glUniform1ui", .ptr = @ptrCast(**const c_void, &namespace._glUniform1ui) },
    .{ .name = "glUniform1uiv", .ptr = @ptrCast(**const c_void, &namespace._glUniform1uiv) },
    .{ .name = "glUniform2f", .ptr = @ptrCast(**const c_void, &namespace._glUniform2f) },
    .{ .name = "glUniform2fv", .ptr = @ptrCast(**const c_void, &namespace._glUniform2fv) },
    .{ .name = "glUniform2i", .ptr = @ptrCast(**const c_void, &namespace._glUniform2i) },
    .{ .name = "glUniform2iv", .ptr = @ptrCast(**const c_void, &namespace._glUniform2iv) },
    .{ .name = "glUniform2ui", .ptr = @ptrCast(**const c_void, &namespace._glUniform2ui) },
    .{ .name = "glUniform2uiv", .ptr = @ptrCast(**const c_void, &namespace._glUniform2uiv) },
    .{ .name = "glUniform3f", .ptr = @ptrCast(**const c_void, &namespace._glUniform3f) },
    .{ .name = "glUniform3fv", .ptr = @ptrCast(**const c_void, &namespace._glUniform3fv) },
    .{ .name = "glUniform3i", .ptr = @ptrCast(**const c_void, &namespace._glUniform3i) },
    .{ .name = "glUniform3iv", .ptr = @ptrCast(**const c_void, &namespace._glUniform3iv) },
    .{ .name = "glUniform3ui", .ptr = @ptrCast(**const c_void, &namespace._glUniform3ui) },
    .{ .name = "glUniform3uiv", .ptr = @ptrCast(**const c_void, &namespace._glUniform3uiv) },
    .{ .name = "glUniform4f", .ptr = @ptrCast(**const c_void, &namespace._glUniform4f) },
    .{ .name = "glUniform4fv", .ptr = @ptrCast(**const c_void, &namespace._glUniform4fv) },
    .{ .name = "glUniform4i", .ptr = @ptrCast(**const c_void, &namespace._glUniform4i) },
    .{ .name = "glUniform4iv", .ptr = @ptrCast(**const c_void, &namespace._glUniform4iv) },
    .{ .name = "glUniform4ui", .ptr = @ptrCast(**const c_void, &namespace._glUniform4ui) },
    .{ .name = "glUniform4uiv", .ptr = @ptrCast(**const c_void, &namespace._glUniform4uiv) },
    .{ .name = "glUniformBlockBinding", .ptr = @ptrCast(**const c_void, &namespace._glUniformBlockBinding) },
    .{ .name = "glUniformMatrix2fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix2fv) },
    .{ .name = "glUniformMatrix2x3fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix2x3fv) },
    .{ .name = "glUniformMatrix2x4fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix2x4fv) },
    .{ .name = "glUniformMatrix3fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix3fv) },
    .{ .name = "glUniformMatrix3x2fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix3x2fv) },
    .{ .name = "glUniformMatrix3x4fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix3x4fv) },
    .{ .name = "glUniformMatrix4fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix4fv) },
    .{ .name = "glUniformMatrix4x2fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix4x2fv) },
    .{ .name = "glUniformMatrix4x3fv", .ptr = @ptrCast(**const c_void, &namespace._glUniformMatrix4x3fv) },
    .{ .name = "glUnmapBuffer", .ptr = @ptrCast(**const c_void, &namespace._glUnmapBuffer) },
    .{ .name = "glUseProgram", .ptr = @ptrCast(**const c_void, &namespace._glUseProgram) },
    .{ .name = "glValidateProgram", .ptr = @ptrCast(**const c_void, &namespace._glValidateProgram) },
    .{ .name = "glVertexAttrib1d", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1d) },
    .{ .name = "glVertexAttrib1dv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1dv) },
    .{ .name = "glVertexAttrib1f", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1f) },
    .{ .name = "glVertexAttrib1fv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1fv) },
    .{ .name = "glVertexAttrib1s", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1s) },
    .{ .name = "glVertexAttrib1sv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib1sv) },
    .{ .name = "glVertexAttrib2d", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2d) },
    .{ .name = "glVertexAttrib2dv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2dv) },
    .{ .name = "glVertexAttrib2f", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2f) },
    .{ .name = "glVertexAttrib2fv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2fv) },
    .{ .name = "glVertexAttrib2s", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2s) },
    .{ .name = "glVertexAttrib2sv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib2sv) },
    .{ .name = "glVertexAttrib3d", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3d) },
    .{ .name = "glVertexAttrib3dv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3dv) },
    .{ .name = "glVertexAttrib3f", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3f) },
    .{ .name = "glVertexAttrib3fv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3fv) },
    .{ .name = "glVertexAttrib3s", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3s) },
    .{ .name = "glVertexAttrib3sv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib3sv) },
    .{ .name = "glVertexAttrib4Nbv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nbv) },
    .{ .name = "glVertexAttrib4Niv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Niv) },
    .{ .name = "glVertexAttrib4Nsv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nsv) },
    .{ .name = "glVertexAttrib4Nub", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nub) },
    .{ .name = "glVertexAttrib4Nubv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nubv) },
    .{ .name = "glVertexAttrib4Nuiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nuiv) },
    .{ .name = "glVertexAttrib4Nusv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4Nusv) },
    .{ .name = "glVertexAttrib4bv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4bv) },
    .{ .name = "glVertexAttrib4d", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4d) },
    .{ .name = "glVertexAttrib4dv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4dv) },
    .{ .name = "glVertexAttrib4f", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4f) },
    .{ .name = "glVertexAttrib4fv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4fv) },
    .{ .name = "glVertexAttrib4iv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4iv) },
    .{ .name = "glVertexAttrib4s", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4s) },
    .{ .name = "glVertexAttrib4sv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4sv) },
    .{ .name = "glVertexAttrib4ubv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4ubv) },
    .{ .name = "glVertexAttrib4uiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4uiv) },
    .{ .name = "glVertexAttrib4usv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttrib4usv) },
    .{ .name = "glVertexAttribI1i", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI1i) },
    .{ .name = "glVertexAttribI1iv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI1iv) },
    .{ .name = "glVertexAttribI1ui", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI1ui) },
    .{ .name = "glVertexAttribI1uiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI1uiv) },
    .{ .name = "glVertexAttribI2i", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI2i) },
    .{ .name = "glVertexAttribI2iv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI2iv) },
    .{ .name = "glVertexAttribI2ui", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI2ui) },
    .{ .name = "glVertexAttribI2uiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI2uiv) },
    .{ .name = "glVertexAttribI3i", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI3i) },
    .{ .name = "glVertexAttribI3iv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI3iv) },
    .{ .name = "glVertexAttribI3ui", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI3ui) },
    .{ .name = "glVertexAttribI3uiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI3uiv) },
    .{ .name = "glVertexAttribI4bv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4bv) },
    .{ .name = "glVertexAttribI4i", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4i) },
    .{ .name = "glVertexAttribI4iv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4iv) },
    .{ .name = "glVertexAttribI4sv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4sv) },
    .{ .name = "glVertexAttribI4ubv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4ubv) },
    .{ .name = "glVertexAttribI4ui", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4ui) },
    .{ .name = "glVertexAttribI4uiv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4uiv) },
    .{ .name = "glVertexAttribI4usv", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribI4usv) },
    .{ .name = "glVertexAttribIPointer", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribIPointer) },
    .{ .name = "glVertexAttribPointer", .ptr = @ptrCast(**const c_void, &namespace._glVertexAttribPointer) },
    .{ .name = "glViewport", .ptr = @ptrCast(**const c_void, &namespace._glViewport) },
    .{ .name = "glWaitSync", .ptr = @ptrCast(**const c_void, &namespace._glWaitSync) },
};
