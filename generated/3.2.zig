// this file was generated by https://github.com/dbandstra/zig-gl
//  version: 3.2

const builtin = @import("builtin");

const cc: builtin.CallingConvention = if (builtin.os.tag == .windows and builtin.arch == .i386)
    .StdCall
else
    .C;

const khronos_float_t = f32;
const khronos_int16_t = c_short;
const khronos_int64_t = i64;
const khronos_int8_t = i8;
const khronos_intptr_t = c_long;
const khronos_ssize_t = c_long;
const khronos_uint16_t = c_ushort;
const khronos_uint64_t = u64;
const khronos_uint8_t = u8;

const struct___GLsync = @OpaqueType();

pub const namespace = struct {
    pub const GLbitfield = c_uint;
    pub const GLboolean = u8;
    pub const GLbyte = khronos_int8_t;
    pub const GLchar = u8;
    pub const GLdouble = f64;
    pub const GLenum = c_uint;
    pub const GLfloat = khronos_float_t;
    pub const GLint = c_int;
    pub const GLint64 = khronos_int64_t;
    pub const GLintptr = khronos_intptr_t;
    pub const GLshort = khronos_int16_t;
    pub const GLsizei = c_int;
    pub const GLsizeiptr = khronos_ssize_t;
    pub const GLsync = ?*struct___GLsync;
    pub const GLubyte = khronos_uint8_t;
    pub const GLuint = c_uint;
    pub const GLuint64 = khronos_uint64_t;
    pub const GLushort = khronos_uint16_t;

    pub const GL_ACTIVE_ATTRIBUTES = 0x8B89;
    pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
    pub const GL_ACTIVE_TEXTURE = 0x84E0;
    pub const GL_ACTIVE_UNIFORMS = 0x8B86;
    pub const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
    pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
    pub const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
    pub const GL_ALPHA = 0x1906;
    pub const GL_ALREADY_SIGNALED = 0x911A;
    pub const GL_ALWAYS = 0x0207;
    pub const GL_AND = 0x1501;
    pub const GL_AND_INVERTED = 0x1504;
    pub const GL_AND_REVERSE = 0x1502;
    pub const GL_ARRAY_BUFFER = 0x8892;
    pub const GL_ARRAY_BUFFER_BINDING = 0x8894;
    pub const GL_ATTACHED_SHADERS = 0x8B85;
    pub const GL_BACK = 0x0405;
    pub const GL_BACK_LEFT = 0x0402;
    pub const GL_BACK_RIGHT = 0x0403;
    pub const GL_BGR = 0x80E0;
    pub const GL_BGRA = 0x80E1;
    pub const GL_BGRA_INTEGER = 0x8D9B;
    pub const GL_BGR_INTEGER = 0x8D9A;
    pub const GL_BLEND = 0x0BE2;
    pub const GL_BLEND_COLOR = 0x8005;
    pub const GL_BLEND_DST = 0x0BE0;
    pub const GL_BLEND_DST_ALPHA = 0x80CA;
    pub const GL_BLEND_DST_RGB = 0x80C8;
    pub const GL_BLEND_EQUATION = 0x8009;
    pub const GL_BLEND_EQUATION_ALPHA = 0x883D;
    pub const GL_BLEND_EQUATION_RGB = 0x8009;
    pub const GL_BLEND_SRC = 0x0BE1;
    pub const GL_BLEND_SRC_ALPHA = 0x80CB;
    pub const GL_BLEND_SRC_RGB = 0x80C9;
    pub const GL_BLUE = 0x1905;
    pub const GL_BLUE_INTEGER = 0x8D96;
    pub const GL_BOOL = 0x8B56;
    pub const GL_BOOL_VEC2 = 0x8B57;
    pub const GL_BOOL_VEC3 = 0x8B58;
    pub const GL_BOOL_VEC4 = 0x8B59;
    pub const GL_BUFFER_ACCESS = 0x88BB;
    pub const GL_BUFFER_ACCESS_FLAGS = 0x911F;
    pub const GL_BUFFER_MAPPED = 0x88BC;
    pub const GL_BUFFER_MAP_LENGTH = 0x9120;
    pub const GL_BUFFER_MAP_OFFSET = 0x9121;
    pub const GL_BUFFER_MAP_POINTER = 0x88BD;
    pub const GL_BUFFER_SIZE = 0x8764;
    pub const GL_BUFFER_USAGE = 0x8765;
    pub const GL_BYTE = 0x1400;
    pub const GL_CCW = 0x0901;
    pub const GL_CLAMP_READ_COLOR = 0x891C;
    pub const GL_CLAMP_TO_BORDER = 0x812D;
    pub const GL_CLAMP_TO_EDGE = 0x812F;
    pub const GL_CLEAR = 0x1500;
    pub const GL_CLIP_DISTANCE0 = 0x3000;
    pub const GL_CLIP_DISTANCE1 = 0x3001;
    pub const GL_CLIP_DISTANCE2 = 0x3002;
    pub const GL_CLIP_DISTANCE3 = 0x3003;
    pub const GL_CLIP_DISTANCE4 = 0x3004;
    pub const GL_CLIP_DISTANCE5 = 0x3005;
    pub const GL_CLIP_DISTANCE6 = 0x3006;
    pub const GL_CLIP_DISTANCE7 = 0x3007;
    pub const GL_COLOR = 0x1800;
    pub const GL_COLOR_ATTACHMENT0 = 0x8CE0;
    pub const GL_COLOR_ATTACHMENT1 = 0x8CE1;
    pub const GL_COLOR_ATTACHMENT10 = 0x8CEA;
    pub const GL_COLOR_ATTACHMENT11 = 0x8CEB;
    pub const GL_COLOR_ATTACHMENT12 = 0x8CEC;
    pub const GL_COLOR_ATTACHMENT13 = 0x8CED;
    pub const GL_COLOR_ATTACHMENT14 = 0x8CEE;
    pub const GL_COLOR_ATTACHMENT15 = 0x8CEF;
    pub const GL_COLOR_ATTACHMENT16 = 0x8CF0;
    pub const GL_COLOR_ATTACHMENT17 = 0x8CF1;
    pub const GL_COLOR_ATTACHMENT18 = 0x8CF2;
    pub const GL_COLOR_ATTACHMENT19 = 0x8CF3;
    pub const GL_COLOR_ATTACHMENT2 = 0x8CE2;
    pub const GL_COLOR_ATTACHMENT20 = 0x8CF4;
    pub const GL_COLOR_ATTACHMENT21 = 0x8CF5;
    pub const GL_COLOR_ATTACHMENT22 = 0x8CF6;
    pub const GL_COLOR_ATTACHMENT23 = 0x8CF7;
    pub const GL_COLOR_ATTACHMENT24 = 0x8CF8;
    pub const GL_COLOR_ATTACHMENT25 = 0x8CF9;
    pub const GL_COLOR_ATTACHMENT26 = 0x8CFA;
    pub const GL_COLOR_ATTACHMENT27 = 0x8CFB;
    pub const GL_COLOR_ATTACHMENT28 = 0x8CFC;
    pub const GL_COLOR_ATTACHMENT29 = 0x8CFD;
    pub const GL_COLOR_ATTACHMENT3 = 0x8CE3;
    pub const GL_COLOR_ATTACHMENT30 = 0x8CFE;
    pub const GL_COLOR_ATTACHMENT31 = 0x8CFF;
    pub const GL_COLOR_ATTACHMENT4 = 0x8CE4;
    pub const GL_COLOR_ATTACHMENT5 = 0x8CE5;
    pub const GL_COLOR_ATTACHMENT6 = 0x8CE6;
    pub const GL_COLOR_ATTACHMENT7 = 0x8CE7;
    pub const GL_COLOR_ATTACHMENT8 = 0x8CE8;
    pub const GL_COLOR_ATTACHMENT9 = 0x8CE9;
    pub const GL_COLOR_BUFFER_BIT = 0x00004000;
    pub const GL_COLOR_CLEAR_VALUE = 0x0C22;
    pub const GL_COLOR_LOGIC_OP = 0x0BF2;
    pub const GL_COLOR_WRITEMASK = 0x0C23;
    pub const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
    pub const GL_COMPILE_STATUS = 0x8B81;
    pub const GL_COMPRESSED_RED = 0x8225;
    pub const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
    pub const GL_COMPRESSED_RG = 0x8226;
    pub const GL_COMPRESSED_RGB = 0x84ED;
    pub const GL_COMPRESSED_RGBA = 0x84EE;
    pub const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
    pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
    pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
    pub const GL_COMPRESSED_SRGB = 0x8C48;
    pub const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
    pub const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
    pub const GL_CONDITION_SATISFIED = 0x911C;
    pub const GL_CONSTANT_ALPHA = 0x8003;
    pub const GL_CONSTANT_COLOR = 0x8001;
    pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
    pub const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
    pub const GL_CONTEXT_FLAGS = 0x821E;
    pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
    pub const GL_CONTEXT_PROFILE_MASK = 0x9126;
    pub const GL_COPY = 0x1503;
    pub const GL_COPY_INVERTED = 0x150C;
    pub const GL_COPY_READ_BUFFER = 0x8F36;
    pub const GL_COPY_WRITE_BUFFER = 0x8F37;
    pub const GL_CULL_FACE = 0x0B44;
    pub const GL_CULL_FACE_MODE = 0x0B45;
    pub const GL_CURRENT_PROGRAM = 0x8B8D;
    pub const GL_CURRENT_QUERY = 0x8865;
    pub const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
    pub const GL_CW = 0x0900;
    pub const GL_DECR = 0x1E03;
    pub const GL_DECR_WRAP = 0x8508;
    pub const GL_DELETE_STATUS = 0x8B80;
    pub const GL_DEPTH = 0x1801;
    pub const GL_DEPTH24_STENCIL8 = 0x88F0;
    pub const GL_DEPTH32F_STENCIL8 = 0x8CAD;
    pub const GL_DEPTH_ATTACHMENT = 0x8D00;
    pub const GL_DEPTH_BUFFER_BIT = 0x00000100;
    pub const GL_DEPTH_CLAMP = 0x864F;
    pub const GL_DEPTH_CLEAR_VALUE = 0x0B73;
    pub const GL_DEPTH_COMPONENT = 0x1902;
    pub const GL_DEPTH_COMPONENT16 = 0x81A5;
    pub const GL_DEPTH_COMPONENT24 = 0x81A6;
    pub const GL_DEPTH_COMPONENT32 = 0x81A7;
    pub const GL_DEPTH_COMPONENT32F = 0x8CAC;
    pub const GL_DEPTH_FUNC = 0x0B74;
    pub const GL_DEPTH_RANGE = 0x0B70;
    pub const GL_DEPTH_STENCIL = 0x84F9;
    pub const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
    pub const GL_DEPTH_TEST = 0x0B71;
    pub const GL_DEPTH_WRITEMASK = 0x0B72;
    pub const GL_DITHER = 0x0BD0;
    pub const GL_DONT_CARE = 0x1100;
    pub const GL_DOUBLE = 0x140A;
    pub const GL_DOUBLEBUFFER = 0x0C32;
    pub const GL_DRAW_BUFFER = 0x0C01;
    pub const GL_DRAW_BUFFER0 = 0x8825;
    pub const GL_DRAW_BUFFER1 = 0x8826;
    pub const GL_DRAW_BUFFER10 = 0x882F;
    pub const GL_DRAW_BUFFER11 = 0x8830;
    pub const GL_DRAW_BUFFER12 = 0x8831;
    pub const GL_DRAW_BUFFER13 = 0x8832;
    pub const GL_DRAW_BUFFER14 = 0x8833;
    pub const GL_DRAW_BUFFER15 = 0x8834;
    pub const GL_DRAW_BUFFER2 = 0x8827;
    pub const GL_DRAW_BUFFER3 = 0x8828;
    pub const GL_DRAW_BUFFER4 = 0x8829;
    pub const GL_DRAW_BUFFER5 = 0x882A;
    pub const GL_DRAW_BUFFER6 = 0x882B;
    pub const GL_DRAW_BUFFER7 = 0x882C;
    pub const GL_DRAW_BUFFER8 = 0x882D;
    pub const GL_DRAW_BUFFER9 = 0x882E;
    pub const GL_DRAW_FRAMEBUFFER = 0x8CA9;
    pub const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
    pub const GL_DST_ALPHA = 0x0304;
    pub const GL_DST_COLOR = 0x0306;
    pub const GL_DYNAMIC_COPY = 0x88EA;
    pub const GL_DYNAMIC_DRAW = 0x88E8;
    pub const GL_DYNAMIC_READ = 0x88E9;
    pub const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    pub const GL_EQUAL = 0x0202;
    pub const GL_EQUIV = 0x1509;
    pub const GL_EXTENSIONS = 0x1F03;
    pub const GL_FALSE = 0;
    pub const GL_FASTEST = 0x1101;
    pub const GL_FILL = 0x1B02;
    pub const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
    pub const GL_FIXED_ONLY = 0x891D;
    pub const GL_FLOAT = 0x1406;
    pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    pub const GL_FLOAT_MAT2 = 0x8B5A;
    pub const GL_FLOAT_MAT2x3 = 0x8B65;
    pub const GL_FLOAT_MAT2x4 = 0x8B66;
    pub const GL_FLOAT_MAT3 = 0x8B5B;
    pub const GL_FLOAT_MAT3x2 = 0x8B67;
    pub const GL_FLOAT_MAT3x4 = 0x8B68;
    pub const GL_FLOAT_MAT4 = 0x8B5C;
    pub const GL_FLOAT_MAT4x2 = 0x8B69;
    pub const GL_FLOAT_MAT4x3 = 0x8B6A;
    pub const GL_FLOAT_VEC2 = 0x8B50;
    pub const GL_FLOAT_VEC3 = 0x8B51;
    pub const GL_FLOAT_VEC4 = 0x8B52;
    pub const GL_FRAGMENT_SHADER = 0x8B30;
    pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
    pub const GL_FRAMEBUFFER = 0x8D40;
    pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
    pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
    pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
    pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
    pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
    pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
    pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
    pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    pub const GL_FRAMEBUFFER_BINDING = 0x8CA6;
    pub const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
    pub const GL_FRAMEBUFFER_DEFAULT = 0x8218;
    pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
    pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
    pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
    pub const GL_FRAMEBUFFER_SRGB = 0x8DB9;
    pub const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
    pub const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    pub const GL_FRONT = 0x0404;
    pub const GL_FRONT_AND_BACK = 0x0408;
    pub const GL_FRONT_FACE = 0x0B46;
    pub const GL_FRONT_LEFT = 0x0400;
    pub const GL_FRONT_RIGHT = 0x0401;
    pub const GL_FUNC_ADD = 0x8006;
    pub const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
    pub const GL_FUNC_SUBTRACT = 0x800A;
    pub const GL_GEOMETRY_INPUT_TYPE = 0x8917;
    pub const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
    pub const GL_GEOMETRY_SHADER = 0x8DD9;
    pub const GL_GEOMETRY_VERTICES_OUT = 0x8916;
    pub const GL_GEQUAL = 0x0206;
    pub const GL_GREATER = 0x0204;
    pub const GL_GREEN = 0x1904;
    pub const GL_GREEN_INTEGER = 0x8D95;
    pub const GL_HALF_FLOAT = 0x140B;
    pub const GL_INCR = 0x1E02;
    pub const GL_INCR_WRAP = 0x8507;
    pub const GL_INFO_LOG_LENGTH = 0x8B84;
    pub const GL_INT = 0x1404;
    pub const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
    pub const GL_INT_SAMPLER_1D = 0x8DC9;
    pub const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
    pub const GL_INT_SAMPLER_2D = 0x8DCA;
    pub const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
    pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
    pub const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
    pub const GL_INT_SAMPLER_3D = 0x8DCB;
    pub const GL_INT_SAMPLER_BUFFER = 0x8DD0;
    pub const GL_INT_SAMPLER_CUBE = 0x8DCC;
    pub const GL_INT_VEC2 = 0x8B53;
    pub const GL_INT_VEC3 = 0x8B54;
    pub const GL_INT_VEC4 = 0x8B55;
    pub const GL_INVALID_ENUM = 0x0500;
    pub const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    pub const GL_INVALID_INDEX = 0xFFFFFFFF;
    pub const GL_INVALID_OPERATION = 0x0502;
    pub const GL_INVALID_VALUE = 0x0501;
    pub const GL_INVERT = 0x150A;
    pub const GL_KEEP = 0x1E00;
    pub const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
    pub const GL_LEFT = 0x0406;
    pub const GL_LEQUAL = 0x0203;
    pub const GL_LESS = 0x0201;
    pub const GL_LINE = 0x1B01;
    pub const GL_LINEAR = 0x2601;
    pub const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    pub const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
    pub const GL_LINES = 0x0001;
    pub const GL_LINES_ADJACENCY = 0x000A;
    pub const GL_LINE_LOOP = 0x0002;
    pub const GL_LINE_SMOOTH = 0x0B20;
    pub const GL_LINE_SMOOTH_HINT = 0x0C52;
    pub const GL_LINE_STRIP = 0x0003;
    pub const GL_LINE_STRIP_ADJACENCY = 0x000B;
    pub const GL_LINE_WIDTH = 0x0B21;
    pub const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
    pub const GL_LINE_WIDTH_RANGE = 0x0B22;
    pub const GL_LINK_STATUS = 0x8B82;
    pub const GL_LOGIC_OP_MODE = 0x0BF0;
    pub const GL_LOWER_LEFT = 0x8CA1;
    pub const GL_MAJOR_VERSION = 0x821B;
    pub const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
    pub const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    pub const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
    pub const GL_MAP_READ_BIT = 0x0001;
    pub const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
    pub const GL_MAP_WRITE_BIT = 0x0002;
    pub const GL_MAX = 0x8008;
    pub const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
    pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
    pub const GL_MAX_CLIP_DISTANCES = 0x0D32;
    pub const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
    pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
    pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
    pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
    pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
    pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
    pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
    pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
    pub const GL_MAX_DRAW_BUFFERS = 0x8824;
    pub const GL_MAX_ELEMENTS_INDICES = 0x80E9;
    pub const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
    pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
    pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
    pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
    pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
    pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
    pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
    pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
    pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
    pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
    pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
    pub const GL_MAX_INTEGER_SAMPLES = 0x9110;
    pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
    pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
    pub const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
    pub const GL_MAX_SAMPLES = 0x8D57;
    pub const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
    pub const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
    pub const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
    pub const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
    pub const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
    pub const GL_MAX_TEXTURE_SIZE = 0x0D33;
    pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
    pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
    pub const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
    pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
    pub const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
    pub const GL_MAX_VARYING_FLOATS = 0x8B4B;
    pub const GL_MAX_VERTEX_ATTRIBS = 0x8869;
    pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
    pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
    pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
    pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
    pub const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
    pub const GL_MIN = 0x8007;
    pub const GL_MINOR_VERSION = 0x821C;
    pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
    pub const GL_MIRRORED_REPEAT = 0x8370;
    pub const GL_MULTISAMPLE = 0x809D;
    pub const GL_NAND = 0x150E;
    pub const GL_NEAREST = 0x2600;
    pub const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
    pub const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
    pub const GL_NEVER = 0x0200;
    pub const GL_NICEST = 0x1102;
    pub const GL_NONE = 0;
    pub const GL_NOOP = 0x1505;
    pub const GL_NOR = 0x1508;
    pub const GL_NOTEQUAL = 0x0205;
    pub const GL_NO_ERROR = 0;
    pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    pub const GL_NUM_EXTENSIONS = 0x821D;
    pub const GL_OBJECT_TYPE = 0x9112;
    pub const GL_ONE = 1;
    pub const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
    pub const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
    pub const GL_ONE_MINUS_DST_ALPHA = 0x0305;
    pub const GL_ONE_MINUS_DST_COLOR = 0x0307;
    pub const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    pub const GL_ONE_MINUS_SRC_COLOR = 0x0301;
    pub const GL_OR = 0x1507;
    pub const GL_OR_INVERTED = 0x150D;
    pub const GL_OR_REVERSE = 0x150B;
    pub const GL_OUT_OF_MEMORY = 0x0505;
    pub const GL_PACK_ALIGNMENT = 0x0D05;
    pub const GL_PACK_IMAGE_HEIGHT = 0x806C;
    pub const GL_PACK_LSB_FIRST = 0x0D01;
    pub const GL_PACK_ROW_LENGTH = 0x0D02;
    pub const GL_PACK_SKIP_IMAGES = 0x806B;
    pub const GL_PACK_SKIP_PIXELS = 0x0D04;
    pub const GL_PACK_SKIP_ROWS = 0x0D03;
    pub const GL_PACK_SWAP_BYTES = 0x0D00;
    pub const GL_PIXEL_PACK_BUFFER = 0x88EB;
    pub const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
    pub const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
    pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
    pub const GL_POINT = 0x1B00;
    pub const GL_POINTS = 0x0000;
    pub const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
    pub const GL_POINT_SIZE = 0x0B11;
    pub const GL_POINT_SIZE_GRANULARITY = 0x0B13;
    pub const GL_POINT_SIZE_RANGE = 0x0B12;
    pub const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
    pub const GL_POLYGON_MODE = 0x0B40;
    pub const GL_POLYGON_OFFSET_FACTOR = 0x8038;
    pub const GL_POLYGON_OFFSET_FILL = 0x8037;
    pub const GL_POLYGON_OFFSET_LINE = 0x2A02;
    pub const GL_POLYGON_OFFSET_POINT = 0x2A01;
    pub const GL_POLYGON_OFFSET_UNITS = 0x2A00;
    pub const GL_POLYGON_SMOOTH = 0x0B41;
    pub const GL_POLYGON_SMOOTH_HINT = 0x0C53;
    pub const GL_PRIMITIVES_GENERATED = 0x8C87;
    pub const GL_PRIMITIVE_RESTART = 0x8F9D;
    pub const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
    pub const GL_PROGRAM_POINT_SIZE = 0x8642;
    pub const GL_PROVOKING_VERTEX = 0x8E4F;
    pub const GL_PROXY_TEXTURE_1D = 0x8063;
    pub const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
    pub const GL_PROXY_TEXTURE_2D = 0x8064;
    pub const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
    pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
    pub const GL_PROXY_TEXTURE_3D = 0x8070;
    pub const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
    pub const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
    pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
    pub const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
    pub const GL_QUERY_BY_REGION_WAIT = 0x8E15;
    pub const GL_QUERY_COUNTER_BITS = 0x8864;
    pub const GL_QUERY_NO_WAIT = 0x8E14;
    pub const GL_QUERY_RESULT = 0x8866;
    pub const GL_QUERY_RESULT_AVAILABLE = 0x8867;
    pub const GL_QUERY_WAIT = 0x8E13;
    pub const GL_R11F_G11F_B10F = 0x8C3A;
    pub const GL_R16 = 0x822A;
    pub const GL_R16F = 0x822D;
    pub const GL_R16I = 0x8233;
    pub const GL_R16UI = 0x8234;
    pub const GL_R16_SNORM = 0x8F98;
    pub const GL_R32F = 0x822E;
    pub const GL_R32I = 0x8235;
    pub const GL_R32UI = 0x8236;
    pub const GL_R3_G3_B2 = 0x2A10;
    pub const GL_R8 = 0x8229;
    pub const GL_R8I = 0x8231;
    pub const GL_R8UI = 0x8232;
    pub const GL_R8_SNORM = 0x8F94;
    pub const GL_RASTERIZER_DISCARD = 0x8C89;
    pub const GL_READ_BUFFER = 0x0C02;
    pub const GL_READ_FRAMEBUFFER = 0x8CA8;
    pub const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
    pub const GL_READ_ONLY = 0x88B8;
    pub const GL_READ_WRITE = 0x88BA;
    pub const GL_RED = 0x1903;
    pub const GL_RED_INTEGER = 0x8D94;
    pub const GL_RENDERBUFFER = 0x8D41;
    pub const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    pub const GL_RENDERBUFFER_BINDING = 0x8CA7;
    pub const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
    pub const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    pub const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
    pub const GL_RENDERBUFFER_HEIGHT = 0x8D43;
    pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    pub const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
    pub const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
    pub const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    pub const GL_RENDERBUFFER_WIDTH = 0x8D42;
    pub const GL_RENDERER = 0x1F01;
    pub const GL_REPEAT = 0x2901;
    pub const GL_REPLACE = 0x1E01;
    pub const GL_RG = 0x8227;
    pub const GL_RG16 = 0x822C;
    pub const GL_RG16F = 0x822F;
    pub const GL_RG16I = 0x8239;
    pub const GL_RG16UI = 0x823A;
    pub const GL_RG16_SNORM = 0x8F99;
    pub const GL_RG32F = 0x8230;
    pub const GL_RG32I = 0x823B;
    pub const GL_RG32UI = 0x823C;
    pub const GL_RG8 = 0x822B;
    pub const GL_RG8I = 0x8237;
    pub const GL_RG8UI = 0x8238;
    pub const GL_RG8_SNORM = 0x8F95;
    pub const GL_RGB = 0x1907;
    pub const GL_RGB10 = 0x8052;
    pub const GL_RGB10_A2 = 0x8059;
    pub const GL_RGB12 = 0x8053;
    pub const GL_RGB16 = 0x8054;
    pub const GL_RGB16F = 0x881B;
    pub const GL_RGB16I = 0x8D89;
    pub const GL_RGB16UI = 0x8D77;
    pub const GL_RGB16_SNORM = 0x8F9A;
    pub const GL_RGB32F = 0x8815;
    pub const GL_RGB32I = 0x8D83;
    pub const GL_RGB32UI = 0x8D71;
    pub const GL_RGB4 = 0x804F;
    pub const GL_RGB5 = 0x8050;
    pub const GL_RGB5_A1 = 0x8057;
    pub const GL_RGB8 = 0x8051;
    pub const GL_RGB8I = 0x8D8F;
    pub const GL_RGB8UI = 0x8D7D;
    pub const GL_RGB8_SNORM = 0x8F96;
    pub const GL_RGB9_E5 = 0x8C3D;
    pub const GL_RGBA = 0x1908;
    pub const GL_RGBA12 = 0x805A;
    pub const GL_RGBA16 = 0x805B;
    pub const GL_RGBA16F = 0x881A;
    pub const GL_RGBA16I = 0x8D88;
    pub const GL_RGBA16UI = 0x8D76;
    pub const GL_RGBA16_SNORM = 0x8F9B;
    pub const GL_RGBA2 = 0x8055;
    pub const GL_RGBA32F = 0x8814;
    pub const GL_RGBA32I = 0x8D82;
    pub const GL_RGBA32UI = 0x8D70;
    pub const GL_RGBA4 = 0x8056;
    pub const GL_RGBA8 = 0x8058;
    pub const GL_RGBA8I = 0x8D8E;
    pub const GL_RGBA8UI = 0x8D7C;
    pub const GL_RGBA8_SNORM = 0x8F97;
    pub const GL_RGBA_INTEGER = 0x8D99;
    pub const GL_RGB_INTEGER = 0x8D98;
    pub const GL_RG_INTEGER = 0x8228;
    pub const GL_RIGHT = 0x0407;
    pub const GL_SAMPLER_1D = 0x8B5D;
    pub const GL_SAMPLER_1D_ARRAY = 0x8DC0;
    pub const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
    pub const GL_SAMPLER_1D_SHADOW = 0x8B61;
    pub const GL_SAMPLER_2D = 0x8B5E;
    pub const GL_SAMPLER_2D_ARRAY = 0x8DC1;
    pub const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
    pub const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
    pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
    pub const GL_SAMPLER_2D_RECT = 0x8B63;
    pub const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
    pub const GL_SAMPLER_2D_SHADOW = 0x8B62;
    pub const GL_SAMPLER_3D = 0x8B5F;
    pub const GL_SAMPLER_BUFFER = 0x8DC2;
    pub const GL_SAMPLER_CUBE = 0x8B60;
    pub const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
    pub const GL_SAMPLES = 0x80A9;
    pub const GL_SAMPLES_PASSED = 0x8914;
    pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
    pub const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
    pub const GL_SAMPLE_BUFFERS = 0x80A8;
    pub const GL_SAMPLE_COVERAGE = 0x80A0;
    pub const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
    pub const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
    pub const GL_SAMPLE_MASK = 0x8E51;
    pub const GL_SAMPLE_MASK_VALUE = 0x8E52;
    pub const GL_SAMPLE_POSITION = 0x8E50;
    pub const GL_SCISSOR_BOX = 0x0C10;
    pub const GL_SCISSOR_TEST = 0x0C11;
    pub const GL_SEPARATE_ATTRIBS = 0x8C8D;
    pub const GL_SET = 0x150F;
    pub const GL_SHADER_SOURCE_LENGTH = 0x8B88;
    pub const GL_SHADER_TYPE = 0x8B4F;
    pub const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
    pub const GL_SHORT = 0x1402;
    pub const GL_SIGNALED = 0x9119;
    pub const GL_SIGNED_NORMALIZED = 0x8F9C;
    pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
    pub const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
    pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
    pub const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
    pub const GL_SRC1_ALPHA = 0x8589;
    pub const GL_SRC_ALPHA = 0x0302;
    pub const GL_SRC_ALPHA_SATURATE = 0x0308;
    pub const GL_SRC_COLOR = 0x0300;
    pub const GL_SRGB = 0x8C40;
    pub const GL_SRGB8 = 0x8C41;
    pub const GL_SRGB8_ALPHA8 = 0x8C43;
    pub const GL_SRGB_ALPHA = 0x8C42;
    pub const GL_STATIC_COPY = 0x88E6;
    pub const GL_STATIC_DRAW = 0x88E4;
    pub const GL_STATIC_READ = 0x88E5;
    pub const GL_STENCIL = 0x1802;
    pub const GL_STENCIL_ATTACHMENT = 0x8D20;
    pub const GL_STENCIL_BACK_FAIL = 0x8801;
    pub const GL_STENCIL_BACK_FUNC = 0x8800;
    pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
    pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
    pub const GL_STENCIL_BACK_REF = 0x8CA3;
    pub const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
    pub const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
    pub const GL_STENCIL_BUFFER_BIT = 0x00000400;
    pub const GL_STENCIL_CLEAR_VALUE = 0x0B91;
    pub const GL_STENCIL_FAIL = 0x0B94;
    pub const GL_STENCIL_FUNC = 0x0B92;
    pub const GL_STENCIL_INDEX = 0x1901;
    pub const GL_STENCIL_INDEX1 = 0x8D46;
    pub const GL_STENCIL_INDEX16 = 0x8D49;
    pub const GL_STENCIL_INDEX4 = 0x8D47;
    pub const GL_STENCIL_INDEX8 = 0x8D48;
    pub const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
    pub const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
    pub const GL_STENCIL_REF = 0x0B97;
    pub const GL_STENCIL_TEST = 0x0B90;
    pub const GL_STENCIL_VALUE_MASK = 0x0B93;
    pub const GL_STENCIL_WRITEMASK = 0x0B98;
    pub const GL_STEREO = 0x0C33;
    pub const GL_STREAM_COPY = 0x88E2;
    pub const GL_STREAM_DRAW = 0x88E0;
    pub const GL_STREAM_READ = 0x88E1;
    pub const GL_SUBPIXEL_BITS = 0x0D50;
    pub const GL_SYNC_CONDITION = 0x9113;
    pub const GL_SYNC_FENCE = 0x9116;
    pub const GL_SYNC_FLAGS = 0x9115;
    pub const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
    pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
    pub const GL_SYNC_STATUS = 0x9114;
    pub const GL_TEXTURE = 0x1702;
    pub const GL_TEXTURE0 = 0x84C0;
    pub const GL_TEXTURE1 = 0x84C1;
    pub const GL_TEXTURE10 = 0x84CA;
    pub const GL_TEXTURE11 = 0x84CB;
    pub const GL_TEXTURE12 = 0x84CC;
    pub const GL_TEXTURE13 = 0x84CD;
    pub const GL_TEXTURE14 = 0x84CE;
    pub const GL_TEXTURE15 = 0x84CF;
    pub const GL_TEXTURE16 = 0x84D0;
    pub const GL_TEXTURE17 = 0x84D1;
    pub const GL_TEXTURE18 = 0x84D2;
    pub const GL_TEXTURE19 = 0x84D3;
    pub const GL_TEXTURE2 = 0x84C2;
    pub const GL_TEXTURE20 = 0x84D4;
    pub const GL_TEXTURE21 = 0x84D5;
    pub const GL_TEXTURE22 = 0x84D6;
    pub const GL_TEXTURE23 = 0x84D7;
    pub const GL_TEXTURE24 = 0x84D8;
    pub const GL_TEXTURE25 = 0x84D9;
    pub const GL_TEXTURE26 = 0x84DA;
    pub const GL_TEXTURE27 = 0x84DB;
    pub const GL_TEXTURE28 = 0x84DC;
    pub const GL_TEXTURE29 = 0x84DD;
    pub const GL_TEXTURE3 = 0x84C3;
    pub const GL_TEXTURE30 = 0x84DE;
    pub const GL_TEXTURE31 = 0x84DF;
    pub const GL_TEXTURE4 = 0x84C4;
    pub const GL_TEXTURE5 = 0x84C5;
    pub const GL_TEXTURE6 = 0x84C6;
    pub const GL_TEXTURE7 = 0x84C7;
    pub const GL_TEXTURE8 = 0x84C8;
    pub const GL_TEXTURE9 = 0x84C9;
    pub const GL_TEXTURE_1D = 0x0DE0;
    pub const GL_TEXTURE_1D_ARRAY = 0x8C18;
    pub const GL_TEXTURE_2D = 0x0DE1;
    pub const GL_TEXTURE_2D_ARRAY = 0x8C1A;
    pub const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
    pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
    pub const GL_TEXTURE_3D = 0x806F;
    pub const GL_TEXTURE_ALPHA_SIZE = 0x805F;
    pub const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
    pub const GL_TEXTURE_BASE_LEVEL = 0x813C;
    pub const GL_TEXTURE_BINDING_1D = 0x8068;
    pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
    pub const GL_TEXTURE_BINDING_2D = 0x8069;
    pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
    pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
    pub const GL_TEXTURE_BINDING_3D = 0x806A;
    pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
    pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
    pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
    pub const GL_TEXTURE_BLUE_SIZE = 0x805E;
    pub const GL_TEXTURE_BLUE_TYPE = 0x8C12;
    pub const GL_TEXTURE_BORDER_COLOR = 0x1004;
    pub const GL_TEXTURE_BUFFER = 0x8C2A;
    pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
    pub const GL_TEXTURE_COMPARE_FUNC = 0x884D;
    pub const GL_TEXTURE_COMPARE_MODE = 0x884C;
    pub const GL_TEXTURE_COMPRESSED = 0x86A1;
    pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
    pub const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
    pub const GL_TEXTURE_CUBE_MAP = 0x8513;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
    pub const GL_TEXTURE_DEPTH = 0x8071;
    pub const GL_TEXTURE_DEPTH_SIZE = 0x884A;
    pub const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
    pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
    pub const GL_TEXTURE_GREEN_SIZE = 0x805D;
    pub const GL_TEXTURE_GREEN_TYPE = 0x8C11;
    pub const GL_TEXTURE_HEIGHT = 0x1001;
    pub const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
    pub const GL_TEXTURE_LOD_BIAS = 0x8501;
    pub const GL_TEXTURE_MAG_FILTER = 0x2800;
    pub const GL_TEXTURE_MAX_LEVEL = 0x813D;
    pub const GL_TEXTURE_MAX_LOD = 0x813B;
    pub const GL_TEXTURE_MIN_FILTER = 0x2801;
    pub const GL_TEXTURE_MIN_LOD = 0x813A;
    pub const GL_TEXTURE_RECTANGLE = 0x84F5;
    pub const GL_TEXTURE_RED_SIZE = 0x805C;
    pub const GL_TEXTURE_RED_TYPE = 0x8C10;
    pub const GL_TEXTURE_SAMPLES = 0x9106;
    pub const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
    pub const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
    pub const GL_TEXTURE_WIDTH = 0x1000;
    pub const GL_TEXTURE_WRAP_R = 0x8072;
    pub const GL_TEXTURE_WRAP_S = 0x2802;
    pub const GL_TEXTURE_WRAP_T = 0x2803;
    pub const GL_TIMEOUT_EXPIRED = 0x911B;
    pub const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
    pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
    pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
    pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
    pub const GL_TRIANGLES = 0x0004;
    pub const GL_TRIANGLES_ADJACENCY = 0x000C;
    pub const GL_TRIANGLE_FAN = 0x0006;
    pub const GL_TRIANGLE_STRIP = 0x0005;
    pub const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
    pub const GL_TRUE = 1;
    pub const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
    pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
    pub const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
    pub const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
    pub const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
    pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
    pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
    pub const GL_UNIFORM_BUFFER = 0x8A11;
    pub const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
    pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
    pub const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
    pub const GL_UNIFORM_BUFFER_START = 0x8A29;
    pub const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
    pub const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
    pub const GL_UNIFORM_NAME_LENGTH = 0x8A39;
    pub const GL_UNIFORM_OFFSET = 0x8A3B;
    pub const GL_UNIFORM_SIZE = 0x8A38;
    pub const GL_UNIFORM_TYPE = 0x8A37;
    pub const GL_UNPACK_ALIGNMENT = 0x0CF5;
    pub const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
    pub const GL_UNPACK_LSB_FIRST = 0x0CF1;
    pub const GL_UNPACK_ROW_LENGTH = 0x0CF2;
    pub const GL_UNPACK_SKIP_IMAGES = 0x806D;
    pub const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
    pub const GL_UNPACK_SKIP_ROWS = 0x0CF3;
    pub const GL_UNPACK_SWAP_BYTES = 0x0CF0;
    pub const GL_UNSIGNALED = 0x9118;
    pub const GL_UNSIGNED_BYTE = 0x1401;
    pub const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
    pub const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
    pub const GL_UNSIGNED_INT = 0x1405;
    pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    pub const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
    pub const GL_UNSIGNED_INT_24_8 = 0x84FA;
    pub const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
    pub const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
    pub const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
    pub const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
    pub const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
    pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
    pub const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
    pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
    pub const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
    pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
    pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
    pub const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
    pub const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
    pub const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
    pub const GL_UNSIGNED_NORMALIZED = 0x8C17;
    pub const GL_UNSIGNED_SHORT = 0x1403;
    pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
    pub const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
    pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
    pub const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
    pub const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
    pub const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
    pub const GL_UPPER_LEFT = 0x8CA2;
    pub const GL_VALIDATE_STATUS = 0x8B83;
    pub const GL_VENDOR = 0x1F00;
    pub const GL_VERSION = 0x1F02;
    pub const GL_VERTEX_ARRAY_BINDING = 0x85B5;
    pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
    pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
    pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
    pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
    pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
    pub const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
    pub const GL_VERTEX_SHADER = 0x8B31;
    pub const GL_VIEWPORT = 0x0BA2;
    pub const GL_WAIT_FAILED = 0x911D;
    pub const GL_WRITE_ONLY = 0x88B9;
    pub const GL_XOR = 0x1506;
    pub const GL_ZERO = 0;

    pub var glActiveTexture: fn (GLenum) callconv(cc) void = undefined;
    pub var glAttachShader: fn (GLuint, GLuint) callconv(cc) void = undefined;
    pub var glBeginConditionalRender: fn (GLuint, GLenum) callconv(cc) void = undefined;
    pub var glBeginQuery: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glBeginTransformFeedback: fn (GLenum) callconv(cc) void = undefined;
    pub var glBindAttribLocation: fn (GLuint, GLuint, [*c]const GLchar) callconv(cc) void = undefined;
    pub var glBindBuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glBindBufferBase: fn (GLenum, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glBindBufferRange: fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    pub var glBindFragDataLocation: fn (GLuint, GLuint, [*c]const GLchar) callconv(cc) void = undefined;
    pub var glBindFramebuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glBindRenderbuffer: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glBindTexture: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glBindVertexArray: fn (GLuint) callconv(cc) void = undefined;
    pub var glBlendColor: fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glBlendEquation: fn (GLenum) callconv(cc) void = undefined;
    pub var glBlendEquationSeparate: fn (GLenum, GLenum) callconv(cc) void = undefined;
    pub var glBlendFunc: fn (GLenum, GLenum) callconv(cc) void = undefined;
    pub var glBlendFuncSeparate: fn (GLenum, GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    pub var glBlitFramebuffer: fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(cc) void = undefined;
    pub var glBufferData: fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) callconv(cc) void = undefined;
    pub var glBufferSubData: fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) callconv(cc) void = undefined;
    pub var glCheckFramebufferStatus: fn (GLenum) callconv(cc) GLenum = undefined;
    pub var glClampColor: fn (GLenum, GLenum) callconv(cc) void = undefined;
    pub var glClear: fn (GLbitfield) callconv(cc) void = undefined;
    pub var glClearBufferfi: fn (GLenum, GLint, GLfloat, GLint) callconv(cc) void = undefined;
    pub var glClearBufferfv: fn (GLenum, GLint, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glClearBufferiv: fn (GLenum, GLint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glClearBufferuiv: fn (GLenum, GLint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glClearColor: fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glClearDepth: fn (GLdouble) callconv(cc) void = undefined;
    pub var glClearStencil: fn (GLint) callconv(cc) void = undefined;
    pub var glClientWaitSync: fn (GLsync, GLbitfield, GLuint64) callconv(cc) GLenum = undefined;
    pub var glColorMask: fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(cc) void = undefined;
    pub var glColorMaski: fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(cc) void = undefined;
    pub var glCompileShader: fn (GLuint) callconv(cc) void = undefined;
    pub var glCompressedTexImage1D: fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCompressedTexImage2D: fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCompressedTexImage3D: fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCompressedTexSubImage1D: fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCompressedTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCompressedTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glCopyBufferSubData: fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    pub var glCopyTexImage1D: fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(cc) void = undefined;
    pub var glCopyTexImage2D: fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(cc) void = undefined;
    pub var glCopyTexSubImage1D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(cc) void = undefined;
    pub var glCopyTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glCopyTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glCreateProgram: fn () callconv(cc) GLuint = undefined;
    pub var glCreateShader: fn (GLenum) callconv(cc) GLuint = undefined;
    pub var glCullFace: fn (GLenum) callconv(cc) void = undefined;
    pub var glDeleteBuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDeleteFramebuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDeleteProgram: fn (GLuint) callconv(cc) void = undefined;
    pub var glDeleteQueries: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDeleteRenderbuffers: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDeleteShader: fn (GLuint) callconv(cc) void = undefined;
    pub var glDeleteSync: fn (GLsync) callconv(cc) void = undefined;
    pub var glDeleteTextures: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDeleteVertexArrays: fn (GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glDepthFunc: fn (GLenum) callconv(cc) void = undefined;
    pub var glDepthMask: fn (GLboolean) callconv(cc) void = undefined;
    pub var glDepthRange: fn (GLdouble, GLdouble) callconv(cc) void = undefined;
    pub var glDetachShader: fn (GLuint, GLuint) callconv(cc) void = undefined;
    pub var glDisable: fn (GLenum) callconv(cc) void = undefined;
    pub var glDisableVertexAttribArray: fn (GLuint) callconv(cc) void = undefined;
    pub var glDisablei: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glDrawArrays: fn (GLenum, GLint, GLsizei) callconv(cc) void = undefined;
    pub var glDrawArraysInstanced: fn (GLenum, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glDrawBuffer: fn (GLenum) callconv(cc) void = undefined;
    pub var glDrawBuffers: fn (GLsizei, [*c]const GLenum) callconv(cc) void = undefined;
    pub var glDrawElements: fn (GLenum, GLsizei, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glDrawElementsBaseVertex: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(cc) void = undefined;
    pub var glDrawElementsInstanced: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(cc) void = undefined;
    pub var glDrawElementsInstancedBaseVertex: fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(cc) void = undefined;
    pub var glDrawRangeElements: fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glDrawRangeElementsBaseVertex: fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(cc) void = undefined;
    pub var glEnable: fn (GLenum) callconv(cc) void = undefined;
    pub var glEnableVertexAttribArray: fn (GLuint) callconv(cc) void = undefined;
    pub var glEnablei: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glEndConditionalRender: fn () callconv(cc) void = undefined;
    pub var glEndQuery: fn (GLenum) callconv(cc) void = undefined;
    pub var glEndTransformFeedback: fn () callconv(cc) void = undefined;
    pub var glFenceSync: fn (GLenum, GLbitfield) callconv(cc) GLsync = undefined;
    pub var glFinish: fn () callconv(cc) void = undefined;
    pub var glFlush: fn () callconv(cc) void = undefined;
    pub var glFlushMappedBufferRange: fn (GLenum, GLintptr, GLsizeiptr) callconv(cc) void = undefined;
    pub var glFramebufferRenderbuffer: fn (GLenum, GLenum, GLenum, GLuint) callconv(cc) void = undefined;
    pub var glFramebufferTexture1D: fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    pub var glFramebufferTexture2D: fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    pub var glFramebufferTexture3D: fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(cc) void = undefined;
    pub var glFramebufferTexture: fn (GLenum, GLenum, GLuint, GLint) callconv(cc) void = undefined;
    pub var glFramebufferTextureLayer: fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(cc) void = undefined;
    pub var glFrontFace: fn (GLenum) callconv(cc) void = undefined;
    pub var glGenBuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenFramebuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenQueries: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenRenderbuffers: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenTextures: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenVertexArrays: fn (GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGenerateMipmap: fn (GLenum) callconv(cc) void = undefined;
    pub var glGetActiveAttrib: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetActiveUniform: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetActiveUniformBlockName: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetActiveUniformBlockiv: fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetActiveUniformName: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetActiveUniformsiv: fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetAttachedShaders: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetAttribLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    pub var glGetBooleani_v: fn (GLenum, GLuint, [*c]GLboolean) callconv(cc) void = undefined;
    pub var glGetBooleanv: fn (GLenum, [*c]GLboolean) callconv(cc) void = undefined;
    pub var glGetBufferParameteri64v: fn (GLenum, GLenum, [*c]GLint64) callconv(cc) void = undefined;
    pub var glGetBufferParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetBufferPointerv: fn (GLenum, GLenum, [*c]?*c_void) callconv(cc) void = undefined;
    pub var glGetBufferSubData: fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) callconv(cc) void = undefined;
    pub var glGetCompressedTexImage: fn (GLenum, GLint, ?*c_void) callconv(cc) void = undefined;
    pub var glGetDoublev: fn (GLenum, [*c]GLdouble) callconv(cc) void = undefined;
    pub var glGetError: fn () callconv(cc) GLenum = undefined;
    pub var glGetFloatv: fn (GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetFragDataLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    pub var glGetFramebufferAttachmentParameteriv: fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetInteger64i_v: fn (GLenum, GLuint, [*c]GLint64) callconv(cc) void = undefined;
    pub var glGetInteger64v: fn (GLenum, [*c]GLint64) callconv(cc) void = undefined;
    pub var glGetIntegeri_v: fn (GLenum, GLuint, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetIntegerv: fn (GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetMultisamplefv: fn (GLenum, GLuint, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetProgramInfoLog: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetProgramiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetQueryObjectiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetQueryObjectuiv: fn (GLuint, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetQueryiv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetRenderbufferParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetShaderInfoLog: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetShaderSource: fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetShaderiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetString: fn (GLenum) callconv(cc) [*c]const GLubyte = undefined;
    pub var glGetStringi: fn (GLenum, GLuint) callconv(cc) [*c]const GLubyte = undefined;
    pub var glGetSynciv: fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetTexImage: fn (GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(cc) void = undefined;
    pub var glGetTexLevelParameterfv: fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetTexLevelParameteriv: fn (GLenum, GLint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetTexParameterIiv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetTexParameterIuiv: fn (GLenum, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetTexParameterfv: fn (GLenum, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetTexParameteriv: fn (GLenum, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetTransformFeedbackVarying: fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(cc) void = undefined;
    pub var glGetUniformBlockIndex: fn (GLuint, [*c]const GLchar) callconv(cc) GLuint = undefined;
    pub var glGetUniformIndices: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetUniformLocation: fn (GLuint, [*c]const GLchar) callconv(cc) GLint = undefined;
    pub var glGetUniformfv: fn (GLuint, GLint, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetUniformiv: fn (GLuint, GLint, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetUniformuiv: fn (GLuint, GLint, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetVertexAttribIiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glGetVertexAttribIuiv: fn (GLuint, GLenum, [*c]GLuint) callconv(cc) void = undefined;
    pub var glGetVertexAttribPointerv: fn (GLuint, GLenum, [*c]?*c_void) callconv(cc) void = undefined;
    pub var glGetVertexAttribdv: fn (GLuint, GLenum, [*c]GLdouble) callconv(cc) void = undefined;
    pub var glGetVertexAttribfv: fn (GLuint, GLenum, [*c]GLfloat) callconv(cc) void = undefined;
    pub var glGetVertexAttribiv: fn (GLuint, GLenum, [*c]GLint) callconv(cc) void = undefined;
    pub var glHint: fn (GLenum, GLenum) callconv(cc) void = undefined;
    pub var glIsBuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsEnabled: fn (GLenum) callconv(cc) GLboolean = undefined;
    pub var glIsEnabledi: fn (GLenum, GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsFramebuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsProgram: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsQuery: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsRenderbuffer: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsShader: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsSync: fn (GLsync) callconv(cc) GLboolean = undefined;
    pub var glIsTexture: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glIsVertexArray: fn (GLuint) callconv(cc) GLboolean = undefined;
    pub var glLineWidth: fn (GLfloat) callconv(cc) void = undefined;
    pub var glLinkProgram: fn (GLuint) callconv(cc) void = undefined;
    pub var glLogicOp: fn (GLenum) callconv(cc) void = undefined;
    pub var glMapBuffer: fn (GLenum, GLenum) callconv(cc) ?*c_void = undefined;
    pub var glMapBufferRange: fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(cc) ?*c_void = undefined;
    pub var glMultiDrawArrays: fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glMultiDrawElements: fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(cc) void = undefined;
    pub var glMultiDrawElementsBaseVertex: fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    pub var glPixelStoref: fn (GLenum, GLfloat) callconv(cc) void = undefined;
    pub var glPixelStorei: fn (GLenum, GLint) callconv(cc) void = undefined;
    pub var glPointParameterf: fn (GLenum, GLfloat) callconv(cc) void = undefined;
    pub var glPointParameterfv: fn (GLenum, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glPointParameteri: fn (GLenum, GLint) callconv(cc) void = undefined;
    pub var glPointParameteriv: fn (GLenum, [*c]const GLint) callconv(cc) void = undefined;
    pub var glPointSize: fn (GLfloat) callconv(cc) void = undefined;
    pub var glPolygonMode: fn (GLenum, GLenum) callconv(cc) void = undefined;
    pub var glPolygonOffset: fn (GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glPrimitiveRestartIndex: fn (GLuint) callconv(cc) void = undefined;
    pub var glProvokingVertex: fn (GLenum) callconv(cc) void = undefined;
    pub var glReadBuffer: fn (GLenum) callconv(cc) void = undefined;
    pub var glReadPixels: fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(cc) void = undefined;
    pub var glRenderbufferStorage: fn (GLenum, GLenum, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glRenderbufferStorageMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glSampleCoverage: fn (GLfloat, GLboolean) callconv(cc) void = undefined;
    pub var glSampleMaski: fn (GLuint, GLbitfield) callconv(cc) void = undefined;
    pub var glScissor: fn (GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glShaderSource: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(cc) void = undefined;
    pub var glStencilFunc: fn (GLenum, GLint, GLuint) callconv(cc) void = undefined;
    pub var glStencilFuncSeparate: fn (GLenum, GLenum, GLint, GLuint) callconv(cc) void = undefined;
    pub var glStencilMask: fn (GLuint) callconv(cc) void = undefined;
    pub var glStencilMaskSeparate: fn (GLenum, GLuint) callconv(cc) void = undefined;
    pub var glStencilOp: fn (GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    pub var glStencilOpSeparate: fn (GLenum, GLenum, GLenum, GLenum) callconv(cc) void = undefined;
    pub var glTexBuffer: fn (GLenum, GLenum, GLuint) callconv(cc) void = undefined;
    pub var glTexImage1D: fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTexImage2D: fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTexImage2DMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(cc) void = undefined;
    pub var glTexImage3D: fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTexImage3DMultisample: fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(cc) void = undefined;
    pub var glTexParameterIiv: fn (GLenum, GLenum, [*c]const GLint) callconv(cc) void = undefined;
    pub var glTexParameterIuiv: fn (GLenum, GLenum, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glTexParameterf: fn (GLenum, GLenum, GLfloat) callconv(cc) void = undefined;
    pub var glTexParameterfv: fn (GLenum, GLenum, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glTexParameteri: fn (GLenum, GLenum, GLint) callconv(cc) void = undefined;
    pub var glTexParameteriv: fn (GLenum, GLenum, [*c]const GLint) callconv(cc) void = undefined;
    pub var glTexSubImage1D: fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTexSubImage2D: fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTexSubImage3D: fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(cc) void = undefined;
    pub var glTransformFeedbackVaryings: fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(cc) void = undefined;
    pub var glUniform1f: fn (GLint, GLfloat) callconv(cc) void = undefined;
    pub var glUniform1fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniform1i: fn (GLint, GLint) callconv(cc) void = undefined;
    pub var glUniform1iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    pub var glUniform1ui: fn (GLint, GLuint) callconv(cc) void = undefined;
    pub var glUniform1uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glUniform2f: fn (GLint, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glUniform2fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniform2i: fn (GLint, GLint, GLint) callconv(cc) void = undefined;
    pub var glUniform2iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    pub var glUniform2ui: fn (GLint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glUniform2uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glUniform3f: fn (GLint, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glUniform3fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniform3i: fn (GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    pub var glUniform3iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    pub var glUniform3ui: fn (GLint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glUniform3uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glUniform4f: fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glUniform4fv: fn (GLint, GLsizei, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniform4i: fn (GLint, GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    pub var glUniform4iv: fn (GLint, GLsizei, [*c]const GLint) callconv(cc) void = undefined;
    pub var glUniform4ui: fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glUniform4uiv: fn (GLint, GLsizei, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glUniformBlockBinding: fn (GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glUniformMatrix2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix2x3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix2x4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix3x2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix3x4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix4fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix4x2fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUniformMatrix4x3fv: fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glUnmapBuffer: fn (GLenum) callconv(cc) GLboolean = undefined;
    pub var glUseProgram: fn (GLuint) callconv(cc) void = undefined;
    pub var glValidateProgram: fn (GLuint) callconv(cc) void = undefined;
    pub var glVertexAttrib1d: fn (GLuint, GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib1dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib1f: fn (GLuint, GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib1fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib1s: fn (GLuint, GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib1sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib2d: fn (GLuint, GLdouble, GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib2dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib2f: fn (GLuint, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib2fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib2s: fn (GLuint, GLshort, GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib2sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib3d: fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib3dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib3f: fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib3fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib3s: fn (GLuint, GLshort, GLshort, GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib3sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nbv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    pub var glVertexAttrib4Niv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nsv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nub: fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nuiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttrib4Nusv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    pub var glVertexAttrib4bv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    pub var glVertexAttrib4d: fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib4dv: fn (GLuint, [*c]const GLdouble) callconv(cc) void = undefined;
    pub var glVertexAttrib4f: fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib4fv: fn (GLuint, [*c]const GLfloat) callconv(cc) void = undefined;
    pub var glVertexAttrib4iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttrib4s: fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib4sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttrib4ubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    pub var glVertexAttrib4uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttrib4usv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    pub var glVertexAttribI1i: fn (GLuint, GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI1iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI1ui: fn (GLuint, GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI1uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI2i: fn (GLuint, GLint, GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI2iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI2ui: fn (GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI2uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI3i: fn (GLuint, GLint, GLint, GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI3iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI3ui: fn (GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI3uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI4bv: fn (GLuint, [*c]const GLbyte) callconv(cc) void = undefined;
    pub var glVertexAttribI4i: fn (GLuint, GLint, GLint, GLint, GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI4iv: fn (GLuint, [*c]const GLint) callconv(cc) void = undefined;
    pub var glVertexAttribI4sv: fn (GLuint, [*c]const GLshort) callconv(cc) void = undefined;
    pub var glVertexAttribI4ubv: fn (GLuint, [*c]const GLubyte) callconv(cc) void = undefined;
    pub var glVertexAttribI4ui: fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI4uiv: fn (GLuint, [*c]const GLuint) callconv(cc) void = undefined;
    pub var glVertexAttribI4usv: fn (GLuint, [*c]const GLushort) callconv(cc) void = undefined;
    pub var glVertexAttribIPointer: fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glVertexAttribPointer: fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(cc) void = undefined;
    pub var glViewport: fn (GLint, GLint, GLsizei, GLsizei) callconv(cc) void = undefined;
    pub var glWaitSync: fn (GLsync, GLbitfield, GLuint64) callconv(cc) void = undefined;
};

pub const extensions = [_][:0]const u8{};

pub const Command = struct {
    name: [:0]const u8,
    ptr: **const c_void,
};

pub const commands = [_]Command{
    .{ .name = "glActiveTexture", .ptr = @ptrCast(**const c_void, &namespace.glActiveTexture) },
    .{ .name = "glAttachShader", .ptr = @ptrCast(**const c_void, &namespace.glAttachShader) },
    .{ .name = "glBeginConditionalRender", .ptr = @ptrCast(**const c_void, &namespace.glBeginConditionalRender) },
    .{ .name = "glBeginQuery", .ptr = @ptrCast(**const c_void, &namespace.glBeginQuery) },
    .{ .name = "glBeginTransformFeedback", .ptr = @ptrCast(**const c_void, &namespace.glBeginTransformFeedback) },
    .{ .name = "glBindAttribLocation", .ptr = @ptrCast(**const c_void, &namespace.glBindAttribLocation) },
    .{ .name = "glBindBuffer", .ptr = @ptrCast(**const c_void, &namespace.glBindBuffer) },
    .{ .name = "glBindBufferBase", .ptr = @ptrCast(**const c_void, &namespace.glBindBufferBase) },
    .{ .name = "glBindBufferRange", .ptr = @ptrCast(**const c_void, &namespace.glBindBufferRange) },
    .{ .name = "glBindFragDataLocation", .ptr = @ptrCast(**const c_void, &namespace.glBindFragDataLocation) },
    .{ .name = "glBindFramebuffer", .ptr = @ptrCast(**const c_void, &namespace.glBindFramebuffer) },
    .{ .name = "glBindRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace.glBindRenderbuffer) },
    .{ .name = "glBindTexture", .ptr = @ptrCast(**const c_void, &namespace.glBindTexture) },
    .{ .name = "glBindVertexArray", .ptr = @ptrCast(**const c_void, &namespace.glBindVertexArray) },
    .{ .name = "glBlendColor", .ptr = @ptrCast(**const c_void, &namespace.glBlendColor) },
    .{ .name = "glBlendEquation", .ptr = @ptrCast(**const c_void, &namespace.glBlendEquation) },
    .{ .name = "glBlendEquationSeparate", .ptr = @ptrCast(**const c_void, &namespace.glBlendEquationSeparate) },
    .{ .name = "glBlendFunc", .ptr = @ptrCast(**const c_void, &namespace.glBlendFunc) },
    .{ .name = "glBlendFuncSeparate", .ptr = @ptrCast(**const c_void, &namespace.glBlendFuncSeparate) },
    .{ .name = "glBlitFramebuffer", .ptr = @ptrCast(**const c_void, &namespace.glBlitFramebuffer) },
    .{ .name = "glBufferData", .ptr = @ptrCast(**const c_void, &namespace.glBufferData) },
    .{ .name = "glBufferSubData", .ptr = @ptrCast(**const c_void, &namespace.glBufferSubData) },
    .{ .name = "glCheckFramebufferStatus", .ptr = @ptrCast(**const c_void, &namespace.glCheckFramebufferStatus) },
    .{ .name = "glClampColor", .ptr = @ptrCast(**const c_void, &namespace.glClampColor) },
    .{ .name = "glClear", .ptr = @ptrCast(**const c_void, &namespace.glClear) },
    .{ .name = "glClearBufferfi", .ptr = @ptrCast(**const c_void, &namespace.glClearBufferfi) },
    .{ .name = "glClearBufferfv", .ptr = @ptrCast(**const c_void, &namespace.glClearBufferfv) },
    .{ .name = "glClearBufferiv", .ptr = @ptrCast(**const c_void, &namespace.glClearBufferiv) },
    .{ .name = "glClearBufferuiv", .ptr = @ptrCast(**const c_void, &namespace.glClearBufferuiv) },
    .{ .name = "glClearColor", .ptr = @ptrCast(**const c_void, &namespace.glClearColor) },
    .{ .name = "glClearDepth", .ptr = @ptrCast(**const c_void, &namespace.glClearDepth) },
    .{ .name = "glClearStencil", .ptr = @ptrCast(**const c_void, &namespace.glClearStencil) },
    .{ .name = "glClientWaitSync", .ptr = @ptrCast(**const c_void, &namespace.glClientWaitSync) },
    .{ .name = "glColorMask", .ptr = @ptrCast(**const c_void, &namespace.glColorMask) },
    .{ .name = "glColorMaski", .ptr = @ptrCast(**const c_void, &namespace.glColorMaski) },
    .{ .name = "glCompileShader", .ptr = @ptrCast(**const c_void, &namespace.glCompileShader) },
    .{ .name = "glCompressedTexImage1D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexImage1D) },
    .{ .name = "glCompressedTexImage2D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexImage2D) },
    .{ .name = "glCompressedTexImage3D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexImage3D) },
    .{ .name = "glCompressedTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexSubImage1D) },
    .{ .name = "glCompressedTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexSubImage2D) },
    .{ .name = "glCompressedTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace.glCompressedTexSubImage3D) },
    .{ .name = "glCopyBufferSubData", .ptr = @ptrCast(**const c_void, &namespace.glCopyBufferSubData) },
    .{ .name = "glCopyTexImage1D", .ptr = @ptrCast(**const c_void, &namespace.glCopyTexImage1D) },
    .{ .name = "glCopyTexImage2D", .ptr = @ptrCast(**const c_void, &namespace.glCopyTexImage2D) },
    .{ .name = "glCopyTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace.glCopyTexSubImage1D) },
    .{ .name = "glCopyTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace.glCopyTexSubImage2D) },
    .{ .name = "glCopyTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace.glCopyTexSubImage3D) },
    .{ .name = "glCreateProgram", .ptr = @ptrCast(**const c_void, &namespace.glCreateProgram) },
    .{ .name = "glCreateShader", .ptr = @ptrCast(**const c_void, &namespace.glCreateShader) },
    .{ .name = "glCullFace", .ptr = @ptrCast(**const c_void, &namespace.glCullFace) },
    .{ .name = "glDeleteBuffers", .ptr = @ptrCast(**const c_void, &namespace.glDeleteBuffers) },
    .{ .name = "glDeleteFramebuffers", .ptr = @ptrCast(**const c_void, &namespace.glDeleteFramebuffers) },
    .{ .name = "glDeleteProgram", .ptr = @ptrCast(**const c_void, &namespace.glDeleteProgram) },
    .{ .name = "glDeleteQueries", .ptr = @ptrCast(**const c_void, &namespace.glDeleteQueries) },
    .{ .name = "glDeleteRenderbuffers", .ptr = @ptrCast(**const c_void, &namespace.glDeleteRenderbuffers) },
    .{ .name = "glDeleteShader", .ptr = @ptrCast(**const c_void, &namespace.glDeleteShader) },
    .{ .name = "glDeleteSync", .ptr = @ptrCast(**const c_void, &namespace.glDeleteSync) },
    .{ .name = "glDeleteTextures", .ptr = @ptrCast(**const c_void, &namespace.glDeleteTextures) },
    .{ .name = "glDeleteVertexArrays", .ptr = @ptrCast(**const c_void, &namespace.glDeleteVertexArrays) },
    .{ .name = "glDepthFunc", .ptr = @ptrCast(**const c_void, &namespace.glDepthFunc) },
    .{ .name = "glDepthMask", .ptr = @ptrCast(**const c_void, &namespace.glDepthMask) },
    .{ .name = "glDepthRange", .ptr = @ptrCast(**const c_void, &namespace.glDepthRange) },
    .{ .name = "glDetachShader", .ptr = @ptrCast(**const c_void, &namespace.glDetachShader) },
    .{ .name = "glDisable", .ptr = @ptrCast(**const c_void, &namespace.glDisable) },
    .{ .name = "glDisableVertexAttribArray", .ptr = @ptrCast(**const c_void, &namespace.glDisableVertexAttribArray) },
    .{ .name = "glDisablei", .ptr = @ptrCast(**const c_void, &namespace.glDisablei) },
    .{ .name = "glDrawArrays", .ptr = @ptrCast(**const c_void, &namespace.glDrawArrays) },
    .{ .name = "glDrawArraysInstanced", .ptr = @ptrCast(**const c_void, &namespace.glDrawArraysInstanced) },
    .{ .name = "glDrawBuffer", .ptr = @ptrCast(**const c_void, &namespace.glDrawBuffer) },
    .{ .name = "glDrawBuffers", .ptr = @ptrCast(**const c_void, &namespace.glDrawBuffers) },
    .{ .name = "glDrawElements", .ptr = @ptrCast(**const c_void, &namespace.glDrawElements) },
    .{ .name = "glDrawElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace.glDrawElementsBaseVertex) },
    .{ .name = "glDrawElementsInstanced", .ptr = @ptrCast(**const c_void, &namespace.glDrawElementsInstanced) },
    .{ .name = "glDrawElementsInstancedBaseVertex", .ptr = @ptrCast(**const c_void, &namespace.glDrawElementsInstancedBaseVertex) },
    .{ .name = "glDrawRangeElements", .ptr = @ptrCast(**const c_void, &namespace.glDrawRangeElements) },
    .{ .name = "glDrawRangeElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace.glDrawRangeElementsBaseVertex) },
    .{ .name = "glEnable", .ptr = @ptrCast(**const c_void, &namespace.glEnable) },
    .{ .name = "glEnableVertexAttribArray", .ptr = @ptrCast(**const c_void, &namespace.glEnableVertexAttribArray) },
    .{ .name = "glEnablei", .ptr = @ptrCast(**const c_void, &namespace.glEnablei) },
    .{ .name = "glEndConditionalRender", .ptr = @ptrCast(**const c_void, &namespace.glEndConditionalRender) },
    .{ .name = "glEndQuery", .ptr = @ptrCast(**const c_void, &namespace.glEndQuery) },
    .{ .name = "glEndTransformFeedback", .ptr = @ptrCast(**const c_void, &namespace.glEndTransformFeedback) },
    .{ .name = "glFenceSync", .ptr = @ptrCast(**const c_void, &namespace.glFenceSync) },
    .{ .name = "glFinish", .ptr = @ptrCast(**const c_void, &namespace.glFinish) },
    .{ .name = "glFlush", .ptr = @ptrCast(**const c_void, &namespace.glFlush) },
    .{ .name = "glFlushMappedBufferRange", .ptr = @ptrCast(**const c_void, &namespace.glFlushMappedBufferRange) },
    .{ .name = "glFramebufferRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferRenderbuffer) },
    .{ .name = "glFramebufferTexture", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferTexture) },
    .{ .name = "glFramebufferTexture1D", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferTexture1D) },
    .{ .name = "glFramebufferTexture2D", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferTexture2D) },
    .{ .name = "glFramebufferTexture3D", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferTexture3D) },
    .{ .name = "glFramebufferTextureLayer", .ptr = @ptrCast(**const c_void, &namespace.glFramebufferTextureLayer) },
    .{ .name = "glFrontFace", .ptr = @ptrCast(**const c_void, &namespace.glFrontFace) },
    .{ .name = "glGenBuffers", .ptr = @ptrCast(**const c_void, &namespace.glGenBuffers) },
    .{ .name = "glGenFramebuffers", .ptr = @ptrCast(**const c_void, &namespace.glGenFramebuffers) },
    .{ .name = "glGenQueries", .ptr = @ptrCast(**const c_void, &namespace.glGenQueries) },
    .{ .name = "glGenRenderbuffers", .ptr = @ptrCast(**const c_void, &namespace.glGenRenderbuffers) },
    .{ .name = "glGenTextures", .ptr = @ptrCast(**const c_void, &namespace.glGenTextures) },
    .{ .name = "glGenVertexArrays", .ptr = @ptrCast(**const c_void, &namespace.glGenVertexArrays) },
    .{ .name = "glGenerateMipmap", .ptr = @ptrCast(**const c_void, &namespace.glGenerateMipmap) },
    .{ .name = "glGetActiveAttrib", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveAttrib) },
    .{ .name = "glGetActiveUniform", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveUniform) },
    .{ .name = "glGetActiveUniformBlockName", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveUniformBlockName) },
    .{ .name = "glGetActiveUniformBlockiv", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveUniformBlockiv) },
    .{ .name = "glGetActiveUniformName", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveUniformName) },
    .{ .name = "glGetActiveUniformsiv", .ptr = @ptrCast(**const c_void, &namespace.glGetActiveUniformsiv) },
    .{ .name = "glGetAttachedShaders", .ptr = @ptrCast(**const c_void, &namespace.glGetAttachedShaders) },
    .{ .name = "glGetAttribLocation", .ptr = @ptrCast(**const c_void, &namespace.glGetAttribLocation) },
    .{ .name = "glGetBooleani_v", .ptr = @ptrCast(**const c_void, &namespace.glGetBooleani_v) },
    .{ .name = "glGetBooleanv", .ptr = @ptrCast(**const c_void, &namespace.glGetBooleanv) },
    .{ .name = "glGetBufferParameteri64v", .ptr = @ptrCast(**const c_void, &namespace.glGetBufferParameteri64v) },
    .{ .name = "glGetBufferParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glGetBufferParameteriv) },
    .{ .name = "glGetBufferPointerv", .ptr = @ptrCast(**const c_void, &namespace.glGetBufferPointerv) },
    .{ .name = "glGetBufferSubData", .ptr = @ptrCast(**const c_void, &namespace.glGetBufferSubData) },
    .{ .name = "glGetCompressedTexImage", .ptr = @ptrCast(**const c_void, &namespace.glGetCompressedTexImage) },
    .{ .name = "glGetDoublev", .ptr = @ptrCast(**const c_void, &namespace.glGetDoublev) },
    .{ .name = "glGetError", .ptr = @ptrCast(**const c_void, &namespace.glGetError) },
    .{ .name = "glGetFloatv", .ptr = @ptrCast(**const c_void, &namespace.glGetFloatv) },
    .{ .name = "glGetFragDataLocation", .ptr = @ptrCast(**const c_void, &namespace.glGetFragDataLocation) },
    .{ .name = "glGetFramebufferAttachmentParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glGetFramebufferAttachmentParameteriv) },
    .{ .name = "glGetInteger64i_v", .ptr = @ptrCast(**const c_void, &namespace.glGetInteger64i_v) },
    .{ .name = "glGetInteger64v", .ptr = @ptrCast(**const c_void, &namespace.glGetInteger64v) },
    .{ .name = "glGetIntegeri_v", .ptr = @ptrCast(**const c_void, &namespace.glGetIntegeri_v) },
    .{ .name = "glGetIntegerv", .ptr = @ptrCast(**const c_void, &namespace.glGetIntegerv) },
    .{ .name = "glGetMultisamplefv", .ptr = @ptrCast(**const c_void, &namespace.glGetMultisamplefv) },
    .{ .name = "glGetProgramInfoLog", .ptr = @ptrCast(**const c_void, &namespace.glGetProgramInfoLog) },
    .{ .name = "glGetProgramiv", .ptr = @ptrCast(**const c_void, &namespace.glGetProgramiv) },
    .{ .name = "glGetQueryObjectiv", .ptr = @ptrCast(**const c_void, &namespace.glGetQueryObjectiv) },
    .{ .name = "glGetQueryObjectuiv", .ptr = @ptrCast(**const c_void, &namespace.glGetQueryObjectuiv) },
    .{ .name = "glGetQueryiv", .ptr = @ptrCast(**const c_void, &namespace.glGetQueryiv) },
    .{ .name = "glGetRenderbufferParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glGetRenderbufferParameteriv) },
    .{ .name = "glGetShaderInfoLog", .ptr = @ptrCast(**const c_void, &namespace.glGetShaderInfoLog) },
    .{ .name = "glGetShaderSource", .ptr = @ptrCast(**const c_void, &namespace.glGetShaderSource) },
    .{ .name = "glGetShaderiv", .ptr = @ptrCast(**const c_void, &namespace.glGetShaderiv) },
    .{ .name = "glGetString", .ptr = @ptrCast(**const c_void, &namespace.glGetString) },
    .{ .name = "glGetStringi", .ptr = @ptrCast(**const c_void, &namespace.glGetStringi) },
    .{ .name = "glGetSynciv", .ptr = @ptrCast(**const c_void, &namespace.glGetSynciv) },
    .{ .name = "glGetTexImage", .ptr = @ptrCast(**const c_void, &namespace.glGetTexImage) },
    .{ .name = "glGetTexLevelParameterfv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexLevelParameterfv) },
    .{ .name = "glGetTexLevelParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexLevelParameteriv) },
    .{ .name = "glGetTexParameterIiv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexParameterIiv) },
    .{ .name = "glGetTexParameterIuiv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexParameterIuiv) },
    .{ .name = "glGetTexParameterfv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexParameterfv) },
    .{ .name = "glGetTexParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glGetTexParameteriv) },
    .{ .name = "glGetTransformFeedbackVarying", .ptr = @ptrCast(**const c_void, &namespace.glGetTransformFeedbackVarying) },
    .{ .name = "glGetUniformBlockIndex", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformBlockIndex) },
    .{ .name = "glGetUniformIndices", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformIndices) },
    .{ .name = "glGetUniformLocation", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformLocation) },
    .{ .name = "glGetUniformfv", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformfv) },
    .{ .name = "glGetUniformiv", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformiv) },
    .{ .name = "glGetUniformuiv", .ptr = @ptrCast(**const c_void, &namespace.glGetUniformuiv) },
    .{ .name = "glGetVertexAttribIiv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribIiv) },
    .{ .name = "glGetVertexAttribIuiv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribIuiv) },
    .{ .name = "glGetVertexAttribPointerv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribPointerv) },
    .{ .name = "glGetVertexAttribdv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribdv) },
    .{ .name = "glGetVertexAttribfv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribfv) },
    .{ .name = "glGetVertexAttribiv", .ptr = @ptrCast(**const c_void, &namespace.glGetVertexAttribiv) },
    .{ .name = "glHint", .ptr = @ptrCast(**const c_void, &namespace.glHint) },
    .{ .name = "glIsBuffer", .ptr = @ptrCast(**const c_void, &namespace.glIsBuffer) },
    .{ .name = "glIsEnabled", .ptr = @ptrCast(**const c_void, &namespace.glIsEnabled) },
    .{ .name = "glIsEnabledi", .ptr = @ptrCast(**const c_void, &namespace.glIsEnabledi) },
    .{ .name = "glIsFramebuffer", .ptr = @ptrCast(**const c_void, &namespace.glIsFramebuffer) },
    .{ .name = "glIsProgram", .ptr = @ptrCast(**const c_void, &namespace.glIsProgram) },
    .{ .name = "glIsQuery", .ptr = @ptrCast(**const c_void, &namespace.glIsQuery) },
    .{ .name = "glIsRenderbuffer", .ptr = @ptrCast(**const c_void, &namespace.glIsRenderbuffer) },
    .{ .name = "glIsShader", .ptr = @ptrCast(**const c_void, &namespace.glIsShader) },
    .{ .name = "glIsSync", .ptr = @ptrCast(**const c_void, &namespace.glIsSync) },
    .{ .name = "glIsTexture", .ptr = @ptrCast(**const c_void, &namespace.glIsTexture) },
    .{ .name = "glIsVertexArray", .ptr = @ptrCast(**const c_void, &namespace.glIsVertexArray) },
    .{ .name = "glLineWidth", .ptr = @ptrCast(**const c_void, &namespace.glLineWidth) },
    .{ .name = "glLinkProgram", .ptr = @ptrCast(**const c_void, &namespace.glLinkProgram) },
    .{ .name = "glLogicOp", .ptr = @ptrCast(**const c_void, &namespace.glLogicOp) },
    .{ .name = "glMapBuffer", .ptr = @ptrCast(**const c_void, &namespace.glMapBuffer) },
    .{ .name = "glMapBufferRange", .ptr = @ptrCast(**const c_void, &namespace.glMapBufferRange) },
    .{ .name = "glMultiDrawArrays", .ptr = @ptrCast(**const c_void, &namespace.glMultiDrawArrays) },
    .{ .name = "glMultiDrawElements", .ptr = @ptrCast(**const c_void, &namespace.glMultiDrawElements) },
    .{ .name = "glMultiDrawElementsBaseVertex", .ptr = @ptrCast(**const c_void, &namespace.glMultiDrawElementsBaseVertex) },
    .{ .name = "glPixelStoref", .ptr = @ptrCast(**const c_void, &namespace.glPixelStoref) },
    .{ .name = "glPixelStorei", .ptr = @ptrCast(**const c_void, &namespace.glPixelStorei) },
    .{ .name = "glPointParameterf", .ptr = @ptrCast(**const c_void, &namespace.glPointParameterf) },
    .{ .name = "glPointParameterfv", .ptr = @ptrCast(**const c_void, &namespace.glPointParameterfv) },
    .{ .name = "glPointParameteri", .ptr = @ptrCast(**const c_void, &namespace.glPointParameteri) },
    .{ .name = "glPointParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glPointParameteriv) },
    .{ .name = "glPointSize", .ptr = @ptrCast(**const c_void, &namespace.glPointSize) },
    .{ .name = "glPolygonMode", .ptr = @ptrCast(**const c_void, &namespace.glPolygonMode) },
    .{ .name = "glPolygonOffset", .ptr = @ptrCast(**const c_void, &namespace.glPolygonOffset) },
    .{ .name = "glPrimitiveRestartIndex", .ptr = @ptrCast(**const c_void, &namespace.glPrimitiveRestartIndex) },
    .{ .name = "glProvokingVertex", .ptr = @ptrCast(**const c_void, &namespace.glProvokingVertex) },
    .{ .name = "glReadBuffer", .ptr = @ptrCast(**const c_void, &namespace.glReadBuffer) },
    .{ .name = "glReadPixels", .ptr = @ptrCast(**const c_void, &namespace.glReadPixels) },
    .{ .name = "glRenderbufferStorage", .ptr = @ptrCast(**const c_void, &namespace.glRenderbufferStorage) },
    .{ .name = "glRenderbufferStorageMultisample", .ptr = @ptrCast(**const c_void, &namespace.glRenderbufferStorageMultisample) },
    .{ .name = "glSampleCoverage", .ptr = @ptrCast(**const c_void, &namespace.glSampleCoverage) },
    .{ .name = "glSampleMaski", .ptr = @ptrCast(**const c_void, &namespace.glSampleMaski) },
    .{ .name = "glScissor", .ptr = @ptrCast(**const c_void, &namespace.glScissor) },
    .{ .name = "glShaderSource", .ptr = @ptrCast(**const c_void, &namespace.glShaderSource) },
    .{ .name = "glStencilFunc", .ptr = @ptrCast(**const c_void, &namespace.glStencilFunc) },
    .{ .name = "glStencilFuncSeparate", .ptr = @ptrCast(**const c_void, &namespace.glStencilFuncSeparate) },
    .{ .name = "glStencilMask", .ptr = @ptrCast(**const c_void, &namespace.glStencilMask) },
    .{ .name = "glStencilMaskSeparate", .ptr = @ptrCast(**const c_void, &namespace.glStencilMaskSeparate) },
    .{ .name = "glStencilOp", .ptr = @ptrCast(**const c_void, &namespace.glStencilOp) },
    .{ .name = "glStencilOpSeparate", .ptr = @ptrCast(**const c_void, &namespace.glStencilOpSeparate) },
    .{ .name = "glTexBuffer", .ptr = @ptrCast(**const c_void, &namespace.glTexBuffer) },
    .{ .name = "glTexImage1D", .ptr = @ptrCast(**const c_void, &namespace.glTexImage1D) },
    .{ .name = "glTexImage2D", .ptr = @ptrCast(**const c_void, &namespace.glTexImage2D) },
    .{ .name = "glTexImage2DMultisample", .ptr = @ptrCast(**const c_void, &namespace.glTexImage2DMultisample) },
    .{ .name = "glTexImage3D", .ptr = @ptrCast(**const c_void, &namespace.glTexImage3D) },
    .{ .name = "glTexImage3DMultisample", .ptr = @ptrCast(**const c_void, &namespace.glTexImage3DMultisample) },
    .{ .name = "glTexParameterIiv", .ptr = @ptrCast(**const c_void, &namespace.glTexParameterIiv) },
    .{ .name = "glTexParameterIuiv", .ptr = @ptrCast(**const c_void, &namespace.glTexParameterIuiv) },
    .{ .name = "glTexParameterf", .ptr = @ptrCast(**const c_void, &namespace.glTexParameterf) },
    .{ .name = "glTexParameterfv", .ptr = @ptrCast(**const c_void, &namespace.glTexParameterfv) },
    .{ .name = "glTexParameteri", .ptr = @ptrCast(**const c_void, &namespace.glTexParameteri) },
    .{ .name = "glTexParameteriv", .ptr = @ptrCast(**const c_void, &namespace.glTexParameteriv) },
    .{ .name = "glTexSubImage1D", .ptr = @ptrCast(**const c_void, &namespace.glTexSubImage1D) },
    .{ .name = "glTexSubImage2D", .ptr = @ptrCast(**const c_void, &namespace.glTexSubImage2D) },
    .{ .name = "glTexSubImage3D", .ptr = @ptrCast(**const c_void, &namespace.glTexSubImage3D) },
    .{ .name = "glTransformFeedbackVaryings", .ptr = @ptrCast(**const c_void, &namespace.glTransformFeedbackVaryings) },
    .{ .name = "glUniform1f", .ptr = @ptrCast(**const c_void, &namespace.glUniform1f) },
    .{ .name = "glUniform1fv", .ptr = @ptrCast(**const c_void, &namespace.glUniform1fv) },
    .{ .name = "glUniform1i", .ptr = @ptrCast(**const c_void, &namespace.glUniform1i) },
    .{ .name = "glUniform1iv", .ptr = @ptrCast(**const c_void, &namespace.glUniform1iv) },
    .{ .name = "glUniform1ui", .ptr = @ptrCast(**const c_void, &namespace.glUniform1ui) },
    .{ .name = "glUniform1uiv", .ptr = @ptrCast(**const c_void, &namespace.glUniform1uiv) },
    .{ .name = "glUniform2f", .ptr = @ptrCast(**const c_void, &namespace.glUniform2f) },
    .{ .name = "glUniform2fv", .ptr = @ptrCast(**const c_void, &namespace.glUniform2fv) },
    .{ .name = "glUniform2i", .ptr = @ptrCast(**const c_void, &namespace.glUniform2i) },
    .{ .name = "glUniform2iv", .ptr = @ptrCast(**const c_void, &namespace.glUniform2iv) },
    .{ .name = "glUniform2ui", .ptr = @ptrCast(**const c_void, &namespace.glUniform2ui) },
    .{ .name = "glUniform2uiv", .ptr = @ptrCast(**const c_void, &namespace.glUniform2uiv) },
    .{ .name = "glUniform3f", .ptr = @ptrCast(**const c_void, &namespace.glUniform3f) },
    .{ .name = "glUniform3fv", .ptr = @ptrCast(**const c_void, &namespace.glUniform3fv) },
    .{ .name = "glUniform3i", .ptr = @ptrCast(**const c_void, &namespace.glUniform3i) },
    .{ .name = "glUniform3iv", .ptr = @ptrCast(**const c_void, &namespace.glUniform3iv) },
    .{ .name = "glUniform3ui", .ptr = @ptrCast(**const c_void, &namespace.glUniform3ui) },
    .{ .name = "glUniform3uiv", .ptr = @ptrCast(**const c_void, &namespace.glUniform3uiv) },
    .{ .name = "glUniform4f", .ptr = @ptrCast(**const c_void, &namespace.glUniform4f) },
    .{ .name = "glUniform4fv", .ptr = @ptrCast(**const c_void, &namespace.glUniform4fv) },
    .{ .name = "glUniform4i", .ptr = @ptrCast(**const c_void, &namespace.glUniform4i) },
    .{ .name = "glUniform4iv", .ptr = @ptrCast(**const c_void, &namespace.glUniform4iv) },
    .{ .name = "glUniform4ui", .ptr = @ptrCast(**const c_void, &namespace.glUniform4ui) },
    .{ .name = "glUniform4uiv", .ptr = @ptrCast(**const c_void, &namespace.glUniform4uiv) },
    .{ .name = "glUniformBlockBinding", .ptr = @ptrCast(**const c_void, &namespace.glUniformBlockBinding) },
    .{ .name = "glUniformMatrix2fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix2fv) },
    .{ .name = "glUniformMatrix2x3fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix2x3fv) },
    .{ .name = "glUniformMatrix2x4fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix2x4fv) },
    .{ .name = "glUniformMatrix3fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix3fv) },
    .{ .name = "glUniformMatrix3x2fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix3x2fv) },
    .{ .name = "glUniformMatrix3x4fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix3x4fv) },
    .{ .name = "glUniformMatrix4fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix4fv) },
    .{ .name = "glUniformMatrix4x2fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix4x2fv) },
    .{ .name = "glUniformMatrix4x3fv", .ptr = @ptrCast(**const c_void, &namespace.glUniformMatrix4x3fv) },
    .{ .name = "glUnmapBuffer", .ptr = @ptrCast(**const c_void, &namespace.glUnmapBuffer) },
    .{ .name = "glUseProgram", .ptr = @ptrCast(**const c_void, &namespace.glUseProgram) },
    .{ .name = "glValidateProgram", .ptr = @ptrCast(**const c_void, &namespace.glValidateProgram) },
    .{ .name = "glVertexAttrib1d", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1d) },
    .{ .name = "glVertexAttrib1dv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1dv) },
    .{ .name = "glVertexAttrib1f", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1f) },
    .{ .name = "glVertexAttrib1fv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1fv) },
    .{ .name = "glVertexAttrib1s", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1s) },
    .{ .name = "glVertexAttrib1sv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib1sv) },
    .{ .name = "glVertexAttrib2d", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2d) },
    .{ .name = "glVertexAttrib2dv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2dv) },
    .{ .name = "glVertexAttrib2f", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2f) },
    .{ .name = "glVertexAttrib2fv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2fv) },
    .{ .name = "glVertexAttrib2s", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2s) },
    .{ .name = "glVertexAttrib2sv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib2sv) },
    .{ .name = "glVertexAttrib3d", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3d) },
    .{ .name = "glVertexAttrib3dv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3dv) },
    .{ .name = "glVertexAttrib3f", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3f) },
    .{ .name = "glVertexAttrib3fv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3fv) },
    .{ .name = "glVertexAttrib3s", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3s) },
    .{ .name = "glVertexAttrib3sv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib3sv) },
    .{ .name = "glVertexAttrib4Nbv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nbv) },
    .{ .name = "glVertexAttrib4Niv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Niv) },
    .{ .name = "glVertexAttrib4Nsv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nsv) },
    .{ .name = "glVertexAttrib4Nub", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nub) },
    .{ .name = "glVertexAttrib4Nubv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nubv) },
    .{ .name = "glVertexAttrib4Nuiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nuiv) },
    .{ .name = "glVertexAttrib4Nusv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4Nusv) },
    .{ .name = "glVertexAttrib4bv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4bv) },
    .{ .name = "glVertexAttrib4d", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4d) },
    .{ .name = "glVertexAttrib4dv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4dv) },
    .{ .name = "glVertexAttrib4f", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4f) },
    .{ .name = "glVertexAttrib4fv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4fv) },
    .{ .name = "glVertexAttrib4iv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4iv) },
    .{ .name = "glVertexAttrib4s", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4s) },
    .{ .name = "glVertexAttrib4sv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4sv) },
    .{ .name = "glVertexAttrib4ubv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4ubv) },
    .{ .name = "glVertexAttrib4uiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4uiv) },
    .{ .name = "glVertexAttrib4usv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttrib4usv) },
    .{ .name = "glVertexAttribI1i", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI1i) },
    .{ .name = "glVertexAttribI1iv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI1iv) },
    .{ .name = "glVertexAttribI1ui", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI1ui) },
    .{ .name = "glVertexAttribI1uiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI1uiv) },
    .{ .name = "glVertexAttribI2i", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI2i) },
    .{ .name = "glVertexAttribI2iv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI2iv) },
    .{ .name = "glVertexAttribI2ui", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI2ui) },
    .{ .name = "glVertexAttribI2uiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI2uiv) },
    .{ .name = "glVertexAttribI3i", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI3i) },
    .{ .name = "glVertexAttribI3iv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI3iv) },
    .{ .name = "glVertexAttribI3ui", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI3ui) },
    .{ .name = "glVertexAttribI3uiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI3uiv) },
    .{ .name = "glVertexAttribI4bv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4bv) },
    .{ .name = "glVertexAttribI4i", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4i) },
    .{ .name = "glVertexAttribI4iv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4iv) },
    .{ .name = "glVertexAttribI4sv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4sv) },
    .{ .name = "glVertexAttribI4ubv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4ubv) },
    .{ .name = "glVertexAttribI4ui", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4ui) },
    .{ .name = "glVertexAttribI4uiv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4uiv) },
    .{ .name = "glVertexAttribI4usv", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribI4usv) },
    .{ .name = "glVertexAttribIPointer", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribIPointer) },
    .{ .name = "glVertexAttribPointer", .ptr = @ptrCast(**const c_void, &namespace.glVertexAttribPointer) },
    .{ .name = "glViewport", .ptr = @ptrCast(**const c_void, &namespace.glViewport) },
    .{ .name = "glWaitSync", .ptr = @ptrCast(**const c_void, &namespace.glWaitSync) },
};
